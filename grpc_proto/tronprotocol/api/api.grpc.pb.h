// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/api.proto
#ifndef GRPC_api_2fapi_2eproto__INCLUDED
#define GRPC_api_2fapi_2eproto__INCLUDED

#include "api/api.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace protocol {

class Wallet final {
 public:
  static constexpr char const* service_full_name() {
    return "protocol.Wallet";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>> AsyncGetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>>(AsyncGetAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncCreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncCreateTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status BroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::Return* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Return>> AsyncBroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Return>>(AsyncBroadcastTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncUpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncUpdateAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status VoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncVoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncVoteWitnessAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncCreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncCreateAssetIssueRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncUpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncUpdateWitnessRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncCreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncCreateWitnessRaw(context, request, cq));
    }
    virtual ::grpc::Status TransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncTransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncTransferAssetRaw(context, request, cq));
    }
    virtual ::grpc::Status ParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncParticipateAssetIssueRaw(context, request, cq));
    }
    virtual ::grpc::Status FreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncFreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncFreezeBalanceRaw(context, request, cq));
    }
    virtual ::grpc::Status UnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncUnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncUnfreezeBalanceRaw(context, request, cq));
    }
    virtual ::grpc::Status UnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncUnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncUnfreezeAssetRaw(context, request, cq));
    }
    virtual ::grpc::Status WithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncWithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncWithdrawBalanceRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncUpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncUpdateAssetRaw(context, request, cq));
    }
    virtual ::grpc::Status ListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NodeList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeList>> AsyncListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeList>>(AsyncListNodesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AssetIssueList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> AsyncGetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(AsyncGetAssetIssueByAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAccountNet(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AccountNetMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountNetMessage>> AsyncGetAccountNet(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountNetMessage>>(AsyncGetAccountNetRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>> AsyncGetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>>(AsyncGetAssetIssueByNameRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetNowBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetBlockByNumRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetBlockByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::protocol::BlockList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>> AsyncGetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>>(AsyncGetBlockByLimitNextRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>> AsyncGetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>>(AsyncGetBlockByLatestNumRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncGetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncGetTransactionByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::WitnessList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>> AsyncListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>>(AsyncListWitnessesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AssetIssueList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> AsyncGetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListRaw(context, request, cq));
    }
    virtual ::grpc::Status TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncTotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncTotalTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetNextMaintenanceTimeRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>* AsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncCreateTransactionRaw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Return>* AsyncBroadcastTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncUpdateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncVoteWitnessAccountRaw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncCreateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncUpdateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncCreateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncParticipateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncFreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncUnfreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncUnfreezeAssetRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncWithdrawBalanceRaw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncUpdateAssetRaw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeList>* AsyncListNodesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* AsyncGetAssetIssueByAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountNetMessage>* AsyncGetAccountNetRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>* AsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetBlockByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>* AsyncGetBlockByLimitNextRaw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>* AsyncGetBlockByLatestNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>* AsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* AsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncTotalTransactionRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetNextMaintenanceTimeRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>> AsyncGetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>>(AsyncGetAccountRaw(context, request, cq));
    }
    ::grpc::Status CreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncCreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncCreateTransactionRaw(context, request, cq));
    }
    ::grpc::Status BroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::Return* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Return>> AsyncBroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Return>>(AsyncBroadcastTransactionRaw(context, request, cq));
    }
    ::grpc::Status UpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncUpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncUpdateAccountRaw(context, request, cq));
    }
    ::grpc::Status VoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncVoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncVoteWitnessAccountRaw(context, request, cq));
    }
    ::grpc::Status CreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncCreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncCreateAssetIssueRaw(context, request, cq));
    }
    ::grpc::Status UpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncUpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncUpdateWitnessRaw(context, request, cq));
    }
    ::grpc::Status CreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncCreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncCreateWitnessRaw(context, request, cq));
    }
    ::grpc::Status TransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncTransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncTransferAssetRaw(context, request, cq));
    }
    ::grpc::Status ParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncParticipateAssetIssueRaw(context, request, cq));
    }
    ::grpc::Status FreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncFreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncFreezeBalanceRaw(context, request, cq));
    }
    ::grpc::Status UnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncUnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncUnfreezeBalanceRaw(context, request, cq));
    }
    ::grpc::Status UnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncUnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncUnfreezeAssetRaw(context, request, cq));
    }
    ::grpc::Status WithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncWithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncWithdrawBalanceRaw(context, request, cq));
    }
    ::grpc::Status UpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncUpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncUpdateAssetRaw(context, request, cq));
    }
    ::grpc::Status ListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NodeList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NodeList>> AsyncListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NodeList>>(AsyncListNodesRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AssetIssueList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> AsyncGetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(AsyncGetAssetIssueByAccountRaw(context, request, cq));
    }
    ::grpc::Status GetAccountNet(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AccountNetMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountNetMessage>> AsyncGetAccountNet(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountNetMessage>>(AsyncGetAccountNetRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>> AsyncGetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>>(AsyncGetAssetIssueByNameRaw(context, request, cq));
    }
    ::grpc::Status GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetNowBlockRaw(context, request, cq));
    }
    ::grpc::Status GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetBlockByNumRaw(context, request, cq));
    }
    ::grpc::Status GetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetBlockByIdRaw(context, request, cq));
    }
    ::grpc::Status GetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::protocol::BlockList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>> AsyncGetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>>(AsyncGetBlockByLimitNextRaw(context, request, cq));
    }
    ::grpc::Status GetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>> AsyncGetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>>(AsyncGetBlockByLatestNumRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncGetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncGetTransactionByIdRaw(context, request, cq));
    }
    ::grpc::Status ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::WitnessList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>> AsyncListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>>(AsyncListWitnessesRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AssetIssueList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> AsyncGetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListRaw(context, request, cq));
    }
    ::grpc::Status TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncTotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncTotalTransactionRaw(context, request, cq));
    }
    ::grpc::Status GetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetNextMaintenanceTimeRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::protocol::Account>* AsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncCreateTransactionRaw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Return>* AsyncBroadcastTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncUpdateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncVoteWitnessAccountRaw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncCreateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncUpdateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncCreateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncParticipateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncFreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncUnfreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncUnfreezeAssetRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncWithdrawBalanceRaw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncUpdateAssetRaw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NodeList>* AsyncListNodesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* AsyncGetAssetIssueByAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AccountNetMessage>* AsyncGetAccountNetRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* AsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetBlockByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>* AsyncGetBlockByLimitNextRaw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>* AsyncGetBlockByLatestNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>* AsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* AsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncTotalTransactionRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetNextMaintenanceTimeRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_BroadcastTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_VoteWitnessAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAssetIssue_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateWitness_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateWitness_;
    const ::grpc::internal::RpcMethod rpcmethod_TransferAsset_;
    const ::grpc::internal::RpcMethod rpcmethod_ParticipateAssetIssue_;
    const ::grpc::internal::RpcMethod rpcmethod_FreezeBalance_;
    const ::grpc::internal::RpcMethod rpcmethod_UnfreezeBalance_;
    const ::grpc::internal::RpcMethod rpcmethod_UnfreezeAsset_;
    const ::grpc::internal::RpcMethod rpcmethod_WithdrawBalance_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAsset_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNodes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueByAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccountNet_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueByName_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNowBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByNum_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockById_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByLimitNext_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByLatestNum_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionById_;
    const ::grpc::internal::RpcMethod rpcmethod_ListWitnesses_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueList_;
    const ::grpc::internal::RpcMethod rpcmethod_TotalTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNextMaintenanceTime_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response);
    virtual ::grpc::Status CreateTransaction(::grpc::ServerContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status BroadcastTransaction(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::Return* response);
    virtual ::grpc::Status UpdateAccount(::grpc::ServerContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status VoteWitnessAccount(::grpc::ServerContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status CreateAssetIssue(::grpc::ServerContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status UpdateWitness(::grpc::ServerContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status CreateWitness(::grpc::ServerContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status TransferAsset(::grpc::ServerContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status ParticipateAssetIssue(::grpc::ServerContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status FreezeBalance(::grpc::ServerContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status UnfreezeBalance(::grpc::ServerContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status UnfreezeAsset(::grpc::ServerContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status WithdrawBalance(::grpc::ServerContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status UpdateAsset(::grpc::ServerContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status ListNodes(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response);
    virtual ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response);
    virtual ::grpc::Status GetAccountNet(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response);
    virtual ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response);
    virtual ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response);
    virtual ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response);
    virtual ::grpc::Status GetBlockById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response);
    virtual ::grpc::Status GetBlockByLimitNext(::grpc::ServerContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response);
    virtual ::grpc::Status GetBlockByLatestNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response);
    virtual ::grpc::Status GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response);
    virtual ::grpc::Status ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response);
    virtual ::grpc::Status GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response);
    virtual ::grpc::Status TotalTransaction(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response);
    virtual ::grpc::Status GetNextMaintenanceTime(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAccount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccount(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Account>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateTransaction() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransaction(::grpc::ServerContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTransaction(::grpc::ServerContext* context, ::protocol::TransferContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BroadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BroadcastTransaction() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BroadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTransaction(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::Return* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcastTransaction(::grpc::ServerContext* context, ::protocol::Transaction* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Return>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateAccount() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount(::grpc::ServerContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAccount(::grpc::ServerContext* context, ::protocol::AccountUpdateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VoteWitnessAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VoteWitnessAccount() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_VoteWitnessAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWitnessAccount(::grpc::ServerContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVoteWitnessAccount(::grpc::ServerContext* context, ::protocol::VoteWitnessContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateAssetIssue() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAssetIssue(::grpc::ServerContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAssetIssue(::grpc::ServerContext* context, ::protocol::AssetIssueContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateWitness() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UpdateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWitness(::grpc::ServerContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWitness(::grpc::ServerContext* context, ::protocol::WitnessUpdateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateWitness() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CreateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWitness(::grpc::ServerContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWitness(::grpc::ServerContext* context, ::protocol::WitnessCreateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TransferAsset() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_TransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferAsset(::grpc::ServerContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferAsset(::grpc::ServerContext* context, ::protocol::TransferAssetContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ParticipateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ParticipateAssetIssue() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ParticipateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParticipateAssetIssue(::grpc::ServerContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParticipateAssetIssue(::grpc::ServerContext* context, ::protocol::ParticipateAssetIssueContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FreezeBalance() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_FreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreezeBalance(::grpc::ServerContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFreezeBalance(::grpc::ServerContext* context, ::protocol::FreezeBalanceContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnfreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UnfreezeBalance() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_UnfreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeBalance(::grpc::ServerContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfreezeBalance(::grpc::ServerContext* context, ::protocol::UnfreezeBalanceContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnfreezeAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UnfreezeAsset() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_UnfreezeAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeAsset(::grpc::ServerContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfreezeAsset(::grpc::ServerContext* context, ::protocol::UnfreezeAssetContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WithdrawBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_WithdrawBalance() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_WithdrawBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawBalance(::grpc::ServerContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawBalance(::grpc::ServerContext* context, ::protocol::WithdrawBalanceContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateAsset() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_UpdateAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAsset(::grpc::ServerContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAsset(::grpc::ServerContext* context, ::protocol::UpdateAssetContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListNodes() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNodes(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NodeList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAssetIssueByAccount() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetAssetIssueByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueByAccount(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccountNet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAccountNet() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetAccountNet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountNet(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountNet(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AccountNetMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueByName(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueContract>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNowBlock(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByNum(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBlockById() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_GetBlockById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByLimitNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBlockByLimitNext() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_GetBlockByLimitNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLimitNext(::grpc::ServerContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByLimitNext(::grpc::ServerContext* context, ::protocol::BlockLimit* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BlockList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByLatestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBlockByLatestNum() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_GetBlockByLatestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLatestNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByLatestNum(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BlockList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWitnesses(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::WitnessList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueList(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TotalTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TotalTransaction() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_TotalTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTransaction(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalTransaction(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNextMaintenanceTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetNextMaintenanceTime() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_GetNextMaintenanceTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextMaintenanceTime(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNextMaintenanceTime(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAccount<WithAsyncMethod_CreateTransaction<WithAsyncMethod_BroadcastTransaction<WithAsyncMethod_UpdateAccount<WithAsyncMethod_VoteWitnessAccount<WithAsyncMethod_CreateAssetIssue<WithAsyncMethod_UpdateWitness<WithAsyncMethod_CreateWitness<WithAsyncMethod_TransferAsset<WithAsyncMethod_ParticipateAssetIssue<WithAsyncMethod_FreezeBalance<WithAsyncMethod_UnfreezeBalance<WithAsyncMethod_UnfreezeAsset<WithAsyncMethod_WithdrawBalance<WithAsyncMethod_UpdateAsset<WithAsyncMethod_ListNodes<WithAsyncMethod_GetAssetIssueByAccount<WithAsyncMethod_GetAccountNet<WithAsyncMethod_GetAssetIssueByName<WithAsyncMethod_GetNowBlock<WithAsyncMethod_GetBlockByNum<WithAsyncMethod_GetBlockById<WithAsyncMethod_GetBlockByLimitNext<WithAsyncMethod_GetBlockByLatestNum<WithAsyncMethod_GetTransactionById<WithAsyncMethod_ListWitnesses<WithAsyncMethod_GetAssetIssueList<WithAsyncMethod_TotalTransaction<WithAsyncMethod_GetNextMaintenanceTime<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAccount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateTransaction() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransaction(::grpc::ServerContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BroadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BroadcastTransaction() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BroadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTransaction(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::Return* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateAccount() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount(::grpc::ServerContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VoteWitnessAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VoteWitnessAccount() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_VoteWitnessAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWitnessAccount(::grpc::ServerContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateAssetIssue() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAssetIssue(::grpc::ServerContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateWitness() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UpdateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWitness(::grpc::ServerContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateWitness() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CreateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWitness(::grpc::ServerContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TransferAsset() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_TransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferAsset(::grpc::ServerContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ParticipateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ParticipateAssetIssue() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ParticipateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParticipateAssetIssue(::grpc::ServerContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FreezeBalance() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_FreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreezeBalance(::grpc::ServerContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnfreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UnfreezeBalance() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_UnfreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeBalance(::grpc::ServerContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnfreezeAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UnfreezeAsset() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_UnfreezeAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeAsset(::grpc::ServerContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WithdrawBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_WithdrawBalance() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_WithdrawBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawBalance(::grpc::ServerContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateAsset() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_UpdateAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAsset(::grpc::ServerContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListNodes() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAssetIssueByAccount() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetAssetIssueByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAccountNet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAccountNet() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetAccountNet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountNet(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBlockById() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_GetBlockById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByLimitNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBlockByLimitNext() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_GetBlockByLimitNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLimitNext(::grpc::ServerContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByLatestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBlockByLatestNum() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_GetBlockByLatestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLatestNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TotalTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TotalTransaction() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_TotalTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTransaction(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNextMaintenanceTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetNextMaintenanceTime() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_GetNextMaintenanceTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextMaintenanceTime(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAccount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::Account, ::protocol::Account>(std::bind(&WithStreamedUnaryMethod_GetAccount<BaseClass>::StreamedGetAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::Account>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateTransaction() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::TransferContract, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_CreateTransaction<BaseClass>::StreamedCreateTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTransaction(::grpc::ServerContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TransferContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BroadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BroadcastTransaction() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::Transaction, ::protocol::Return>(std::bind(&WithStreamedUnaryMethod_BroadcastTransaction<BaseClass>::StreamedBroadcastTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BroadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BroadcastTransaction(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::Return* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBroadcastTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Transaction,::protocol::Return>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateAccount() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::AccountUpdateContract, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_UpdateAccount<BaseClass>::StreamedUpdateAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAccount(::grpc::ServerContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AccountUpdateContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VoteWitnessAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VoteWitnessAccount() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::VoteWitnessContract, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_VoteWitnessAccount<BaseClass>::StreamedVoteWitnessAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VoteWitnessAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VoteWitnessAccount(::grpc::ServerContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVoteWitnessAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::VoteWitnessContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateAssetIssue() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::AssetIssueContract, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_CreateAssetIssue<BaseClass>::StreamedCreateAssetIssue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAssetIssue(::grpc::ServerContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAssetIssue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AssetIssueContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateWitness() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::WitnessUpdateContract, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_UpdateWitness<BaseClass>::StreamedUpdateWitness, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateWitness(::grpc::ServerContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateWitness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::WitnessUpdateContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateWitness() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::WitnessCreateContract, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_CreateWitness<BaseClass>::StreamedCreateWitness, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateWitness(::grpc::ServerContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateWitness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::WitnessCreateContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TransferAsset() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::TransferAssetContract, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_TransferAsset<BaseClass>::StreamedTransferAsset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransferAsset(::grpc::ServerContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransferAsset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TransferAssetContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParticipateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ParticipateAssetIssue() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::ParticipateAssetIssueContract, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_ParticipateAssetIssue<BaseClass>::StreamedParticipateAssetIssue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ParticipateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParticipateAssetIssue(::grpc::ServerContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParticipateAssetIssue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::ParticipateAssetIssueContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FreezeBalance() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::FreezeBalanceContract, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_FreezeBalance<BaseClass>::StreamedFreezeBalance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FreezeBalance(::grpc::ServerContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFreezeBalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::FreezeBalanceContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnfreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UnfreezeBalance() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::UnfreezeBalanceContract, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_UnfreezeBalance<BaseClass>::StreamedUnfreezeBalance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UnfreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnfreezeBalance(::grpc::ServerContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnfreezeBalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::UnfreezeBalanceContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnfreezeAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UnfreezeAsset() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::UnfreezeAssetContract, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_UnfreezeAsset<BaseClass>::StreamedUnfreezeAsset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UnfreezeAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnfreezeAsset(::grpc::ServerContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnfreezeAsset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::UnfreezeAssetContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WithdrawBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_WithdrawBalance() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::WithdrawBalanceContract, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_WithdrawBalance<BaseClass>::StreamedWithdrawBalance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_WithdrawBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WithdrawBalance(::grpc::ServerContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWithdrawBalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::WithdrawBalanceContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateAsset() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::UpdateAssetContract, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_UpdateAsset<BaseClass>::StreamedUpdateAsset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAsset(::grpc::ServerContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAsset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::UpdateAssetContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListNodes() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::EmptyMessage, ::protocol::NodeList>(std::bind(&WithStreamedUnaryMethod_ListNodes<BaseClass>::StreamedListNodes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::NodeList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueByAccount() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::Account, ::protocol::AssetIssueList>(std::bind(&WithStreamedUnaryMethod_GetAssetIssueByAccount<BaseClass>::StreamedGetAssetIssueByAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueByAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::AssetIssueList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccountNet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAccountNet() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::Account, ::protocol::AccountNetMessage>(std::bind(&WithStreamedUnaryMethod_GetAccountNet<BaseClass>::StreamedGetAccountNet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAccountNet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccountNet(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccountNet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::AccountNetMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueContract>(std::bind(&WithStreamedUnaryMethod_GetAssetIssueByName<BaseClass>::StreamedGetAssetIssueByName, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueByName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::AssetIssueContract>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::EmptyMessage, ::protocol::Block>(std::bind(&WithStreamedUnaryMethod_GetNowBlock<BaseClass>::StreamedGetNowBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNowBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::NumberMessage, ::protocol::Block>(std::bind(&WithStreamedUnaryMethod_GetBlockByNum<BaseClass>::StreamedGetBlockByNum, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBlockById() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::BytesMessage, ::protocol::Block>(std::bind(&WithStreamedUnaryMethod_GetBlockById<BaseClass>::StreamedGetBlockById, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBlockById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByLimitNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBlockByLimitNext() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::BlockLimit, ::protocol::BlockList>(std::bind(&WithStreamedUnaryMethod_GetBlockByLimitNext<BaseClass>::StreamedGetBlockByLimitNext, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBlockByLimitNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByLimitNext(::grpc::ServerContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByLimitNext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BlockLimit,::protocol::BlockList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByLatestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBlockByLatestNum() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::NumberMessage, ::protocol::BlockList>(std::bind(&WithStreamedUnaryMethod_GetBlockByLatestNum<BaseClass>::StreamedGetBlockByLatestNum, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBlockByLatestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByLatestNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByLatestNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::BlockList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::BytesMessage, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_GetTransactionById<BaseClass>::StreamedGetTransactionById, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::EmptyMessage, ::protocol::WitnessList>(std::bind(&WithStreamedUnaryMethod_ListWitnesses<BaseClass>::StreamedListWitnesses, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListWitnesses(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::WitnessList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::EmptyMessage, ::protocol::AssetIssueList>(std::bind(&WithStreamedUnaryMethod_GetAssetIssueList<BaseClass>::StreamedGetAssetIssueList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::AssetIssueList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TotalTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TotalTransaction() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::EmptyMessage, ::protocol::NumberMessage>(std::bind(&WithStreamedUnaryMethod_TotalTransaction<BaseClass>::StreamedTotalTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TotalTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TotalTransaction(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTotalTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNextMaintenanceTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetNextMaintenanceTime() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::EmptyMessage, ::protocol::NumberMessage>(std::bind(&WithStreamedUnaryMethod_GetNextMaintenanceTime<BaseClass>::StreamedGetNextMaintenanceTime, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNextMaintenanceTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNextMaintenanceTime(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNextMaintenanceTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAccount<WithStreamedUnaryMethod_CreateTransaction<WithStreamedUnaryMethod_BroadcastTransaction<WithStreamedUnaryMethod_UpdateAccount<WithStreamedUnaryMethod_VoteWitnessAccount<WithStreamedUnaryMethod_CreateAssetIssue<WithStreamedUnaryMethod_UpdateWitness<WithStreamedUnaryMethod_CreateWitness<WithStreamedUnaryMethod_TransferAsset<WithStreamedUnaryMethod_ParticipateAssetIssue<WithStreamedUnaryMethod_FreezeBalance<WithStreamedUnaryMethod_UnfreezeBalance<WithStreamedUnaryMethod_UnfreezeAsset<WithStreamedUnaryMethod_WithdrawBalance<WithStreamedUnaryMethod_UpdateAsset<WithStreamedUnaryMethod_ListNodes<WithStreamedUnaryMethod_GetAssetIssueByAccount<WithStreamedUnaryMethod_GetAccountNet<WithStreamedUnaryMethod_GetAssetIssueByName<WithStreamedUnaryMethod_GetNowBlock<WithStreamedUnaryMethod_GetBlockByNum<WithStreamedUnaryMethod_GetBlockById<WithStreamedUnaryMethod_GetBlockByLimitNext<WithStreamedUnaryMethod_GetBlockByLatestNum<WithStreamedUnaryMethod_GetTransactionById<WithStreamedUnaryMethod_ListWitnesses<WithStreamedUnaryMethod_GetAssetIssueList<WithStreamedUnaryMethod_TotalTransaction<WithStreamedUnaryMethod_GetNextMaintenanceTime<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAccount<WithStreamedUnaryMethod_CreateTransaction<WithStreamedUnaryMethod_BroadcastTransaction<WithStreamedUnaryMethod_UpdateAccount<WithStreamedUnaryMethod_VoteWitnessAccount<WithStreamedUnaryMethod_CreateAssetIssue<WithStreamedUnaryMethod_UpdateWitness<WithStreamedUnaryMethod_CreateWitness<WithStreamedUnaryMethod_TransferAsset<WithStreamedUnaryMethod_ParticipateAssetIssue<WithStreamedUnaryMethod_FreezeBalance<WithStreamedUnaryMethod_UnfreezeBalance<WithStreamedUnaryMethod_UnfreezeAsset<WithStreamedUnaryMethod_WithdrawBalance<WithStreamedUnaryMethod_UpdateAsset<WithStreamedUnaryMethod_ListNodes<WithStreamedUnaryMethod_GetAssetIssueByAccount<WithStreamedUnaryMethod_GetAccountNet<WithStreamedUnaryMethod_GetAssetIssueByName<WithStreamedUnaryMethod_GetNowBlock<WithStreamedUnaryMethod_GetBlockByNum<WithStreamedUnaryMethod_GetBlockById<WithStreamedUnaryMethod_GetBlockByLimitNext<WithStreamedUnaryMethod_GetBlockByLatestNum<WithStreamedUnaryMethod_GetTransactionById<WithStreamedUnaryMethod_ListWitnesses<WithStreamedUnaryMethod_GetAssetIssueList<WithStreamedUnaryMethod_TotalTransaction<WithStreamedUnaryMethod_GetNextMaintenanceTime<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

class WalletSolidity final {
 public:
  static constexpr char const* service_full_name() {
    return "protocol.WalletSolidity";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>> AsyncGetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>>(AsyncGetAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::WitnessList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>> AsyncListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>>(AsyncListWitnessesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AssetIssueList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> AsyncGetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueListByTimestamp(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::AssetIssueList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> AsyncGetAssetIssueListByTimestamp(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListByTimestampRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AssetIssueList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> AsyncGetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(AsyncGetAssetIssueByAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>> AsyncGetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>>(AsyncGetAssetIssueByNameRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetNowBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetBlockByNumRaw(context, request, cq));
    }
    // get transaction
    virtual ::grpc::Status TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncTotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncTotalTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncGetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncGetTransactionByIdRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>* AsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>* AsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* AsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* AsyncGetAssetIssueListByTimestampRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* AsyncGetAssetIssueByAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>* AsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncTotalTransactionRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>> AsyncGetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>>(AsyncGetAccountRaw(context, request, cq));
    }
    ::grpc::Status ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::WitnessList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>> AsyncListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>>(AsyncListWitnessesRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AssetIssueList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> AsyncGetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueListByTimestamp(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::AssetIssueList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> AsyncGetAssetIssueListByTimestamp(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListByTimestampRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AssetIssueList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> AsyncGetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(AsyncGetAssetIssueByAccountRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>> AsyncGetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>>(AsyncGetAssetIssueByNameRaw(context, request, cq));
    }
    ::grpc::Status GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetNowBlockRaw(context, request, cq));
    }
    ::grpc::Status GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetBlockByNumRaw(context, request, cq));
    }
    ::grpc::Status TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncTotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncTotalTransactionRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncGetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncGetTransactionByIdRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::protocol::Account>* AsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>* AsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* AsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* AsyncGetAssetIssueListByTimestampRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* AsyncGetAssetIssueByAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* AsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncTotalTransactionRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_ListWitnesses_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueListByTimestamp_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueByAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueByName_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNowBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByNum_;
    const ::grpc::internal::RpcMethod rpcmethod_TotalTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionById_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response);
    virtual ::grpc::Status ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response);
    virtual ::grpc::Status GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response);
    virtual ::grpc::Status GetAssetIssueListByTimestamp(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::AssetIssueList* response);
    virtual ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response);
    virtual ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response);
    virtual ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response);
    virtual ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response);
    // get transaction
    virtual ::grpc::Status TotalTransaction(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response);
    virtual ::grpc::Status GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAccount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccount(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Account>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWitnesses(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::WitnessList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueList(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueListByTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAssetIssueListByTimestamp() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetAssetIssueListByTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueListByTimestamp(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueListByTimestamp(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAssetIssueByAccount() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetAssetIssueByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueByAccount(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueByName(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueContract>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNowBlock(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByNum(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TotalTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TotalTransaction() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_TotalTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTransaction(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalTransaction(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAccount<WithAsyncMethod_ListWitnesses<WithAsyncMethod_GetAssetIssueList<WithAsyncMethod_GetAssetIssueListByTimestamp<WithAsyncMethod_GetAssetIssueByAccount<WithAsyncMethod_GetAssetIssueByName<WithAsyncMethod_GetNowBlock<WithAsyncMethod_GetBlockByNum<WithAsyncMethod_TotalTransaction<WithAsyncMethod_GetTransactionById<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAccount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueListByTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAssetIssueListByTimestamp() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetAssetIssueListByTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueListByTimestamp(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAssetIssueByAccount() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetAssetIssueByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TotalTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TotalTransaction() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_TotalTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTransaction(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAccount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::Account, ::protocol::Account>(std::bind(&WithStreamedUnaryMethod_GetAccount<BaseClass>::StreamedGetAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::Account>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::EmptyMessage, ::protocol::WitnessList>(std::bind(&WithStreamedUnaryMethod_ListWitnesses<BaseClass>::StreamedListWitnesses, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListWitnesses(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::WitnessList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::EmptyMessage, ::protocol::AssetIssueList>(std::bind(&WithStreamedUnaryMethod_GetAssetIssueList<BaseClass>::StreamedGetAssetIssueList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::AssetIssueList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueListByTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueListByTimestamp() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::NumberMessage, ::protocol::AssetIssueList>(std::bind(&WithStreamedUnaryMethod_GetAssetIssueListByTimestamp<BaseClass>::StreamedGetAssetIssueListByTimestamp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueListByTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueListByTimestamp(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueListByTimestamp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::AssetIssueList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueByAccount() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::Account, ::protocol::AssetIssueList>(std::bind(&WithStreamedUnaryMethod_GetAssetIssueByAccount<BaseClass>::StreamedGetAssetIssueByAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueByAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::AssetIssueList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueContract>(std::bind(&WithStreamedUnaryMethod_GetAssetIssueByName<BaseClass>::StreamedGetAssetIssueByName, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueByName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::AssetIssueContract>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::EmptyMessage, ::protocol::Block>(std::bind(&WithStreamedUnaryMethod_GetNowBlock<BaseClass>::StreamedGetNowBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNowBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::NumberMessage, ::protocol::Block>(std::bind(&WithStreamedUnaryMethod_GetBlockByNum<BaseClass>::StreamedGetBlockByNum, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TotalTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TotalTransaction() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::EmptyMessage, ::protocol::NumberMessage>(std::bind(&WithStreamedUnaryMethod_TotalTransaction<BaseClass>::StreamedTotalTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TotalTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TotalTransaction(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTotalTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::BytesMessage, ::protocol::Transaction>(std::bind(&WithStreamedUnaryMethod_GetTransactionById<BaseClass>::StreamedGetTransactionById, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAccount<WithStreamedUnaryMethod_ListWitnesses<WithStreamedUnaryMethod_GetAssetIssueList<WithStreamedUnaryMethod_GetAssetIssueListByTimestamp<WithStreamedUnaryMethod_GetAssetIssueByAccount<WithStreamedUnaryMethod_GetAssetIssueByName<WithStreamedUnaryMethod_GetNowBlock<WithStreamedUnaryMethod_GetBlockByNum<WithStreamedUnaryMethod_TotalTransaction<WithStreamedUnaryMethod_GetTransactionById<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAccount<WithStreamedUnaryMethod_ListWitnesses<WithStreamedUnaryMethod_GetAssetIssueList<WithStreamedUnaryMethod_GetAssetIssueListByTimestamp<WithStreamedUnaryMethod_GetAssetIssueByAccount<WithStreamedUnaryMethod_GetAssetIssueByName<WithStreamedUnaryMethod_GetNowBlock<WithStreamedUnaryMethod_GetBlockByNum<WithStreamedUnaryMethod_TotalTransaction<WithStreamedUnaryMethod_GetTransactionById<Service > > > > > > > > > > StreamedService;
};

class WalletExtension final {
 public:
  static constexpr char const* service_full_name() {
    return "protocol.WalletExtension";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetTransactionsByTimestamp(::grpc::ClientContext* context, const ::protocol::TimePaginatedMessage& request, ::protocol::TransactionList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>> AsyncGetTransactionsByTimestamp(::grpc::ClientContext* context, const ::protocol::TimePaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>>(AsyncGetTransactionsByTimestampRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionsByTimestampCount(::grpc::ClientContext* context, const ::protocol::TimeMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetTransactionsByTimestampCount(::grpc::ClientContext* context, const ::protocol::TimeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetTransactionsByTimestampCountRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>> AsyncGetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>>(AsyncGetTransactionsFromThisRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>> AsyncGetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>>(AsyncGetTransactionsToThisRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionsFromThisCount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetTransactionsFromThisCount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetTransactionsFromThisCountRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionsToThisCount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetTransactionsToThisCount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetTransactionsToThisCountRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>* AsyncGetTransactionsByTimestampRaw(::grpc::ClientContext* context, const ::protocol::TimePaginatedMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetTransactionsByTimestampCountRaw(::grpc::ClientContext* context, const ::protocol::TimeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>* AsyncGetTransactionsFromThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>* AsyncGetTransactionsToThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetTransactionsFromThisCountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetTransactionsToThisCountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetTransactionsByTimestamp(::grpc::ClientContext* context, const ::protocol::TimePaginatedMessage& request, ::protocol::TransactionList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>> AsyncGetTransactionsByTimestamp(::grpc::ClientContext* context, const ::protocol::TimePaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>>(AsyncGetTransactionsByTimestampRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionsByTimestampCount(::grpc::ClientContext* context, const ::protocol::TimeMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetTransactionsByTimestampCount(::grpc::ClientContext* context, const ::protocol::TimeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetTransactionsByTimestampCountRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>> AsyncGetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>>(AsyncGetTransactionsFromThisRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>> AsyncGetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>>(AsyncGetTransactionsToThisRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionsFromThisCount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetTransactionsFromThisCount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetTransactionsFromThisCountRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionsToThisCount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetTransactionsToThisCount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetTransactionsToThisCountRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* AsyncGetTransactionsByTimestampRaw(::grpc::ClientContext* context, const ::protocol::TimePaginatedMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetTransactionsByTimestampCountRaw(::grpc::ClientContext* context, const ::protocol::TimeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* AsyncGetTransactionsFromThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* AsyncGetTransactionsToThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetTransactionsFromThisCountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetTransactionsToThisCountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionsByTimestamp_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionsByTimestampCount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionsFromThis_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionsToThis_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionsFromThisCount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionsToThisCount_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetTransactionsByTimestamp(::grpc::ServerContext* context, const ::protocol::TimePaginatedMessage* request, ::protocol::TransactionList* response);
    virtual ::grpc::Status GetTransactionsByTimestampCount(::grpc::ServerContext* context, const ::protocol::TimeMessage* request, ::protocol::NumberMessage* response);
    virtual ::grpc::Status GetTransactionsFromThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response);
    virtual ::grpc::Status GetTransactionsToThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response);
    virtual ::grpc::Status GetTransactionsFromThisCount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::NumberMessage* response);
    virtual ::grpc::Status GetTransactionsToThisCount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::NumberMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionsByTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTransactionsByTimestamp() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetTransactionsByTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsByTimestamp(::grpc::ServerContext* context, const ::protocol::TimePaginatedMessage* request, ::protocol::TransactionList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsByTimestamp(::grpc::ServerContext* context, ::protocol::TimePaginatedMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionsByTimestampCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTransactionsByTimestampCount() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTransactionsByTimestampCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsByTimestampCount(::grpc::ServerContext* context, const ::protocol::TimeMessage* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsByTimestampCount(::grpc::ServerContext* context, ::protocol::TimeMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionsFromThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTransactionsFromThis() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetTransactionsFromThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsFromThis(::grpc::ServerContext* context, ::protocol::AccountPaginated* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionsToThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTransactionsToThis() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTransactionsToThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsToThis(::grpc::ServerContext* context, ::protocol::AccountPaginated* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionsFromThisCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTransactionsFromThisCount() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetTransactionsFromThisCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThisCount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsFromThisCount(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionsToThisCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTransactionsToThisCount() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetTransactionsToThisCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThisCount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsToThisCount(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetTransactionsByTimestamp<WithAsyncMethod_GetTransactionsByTimestampCount<WithAsyncMethod_GetTransactionsFromThis<WithAsyncMethod_GetTransactionsToThis<WithAsyncMethod_GetTransactionsFromThisCount<WithAsyncMethod_GetTransactionsToThisCount<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetTransactionsByTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTransactionsByTimestamp() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetTransactionsByTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsByTimestamp(::grpc::ServerContext* context, const ::protocol::TimePaginatedMessage* request, ::protocol::TransactionList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionsByTimestampCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTransactionsByTimestampCount() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTransactionsByTimestampCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsByTimestampCount(::grpc::ServerContext* context, const ::protocol::TimeMessage* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionsFromThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTransactionsFromThis() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetTransactionsFromThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionsToThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTransactionsToThis() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTransactionsToThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionsFromThisCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTransactionsFromThisCount() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetTransactionsFromThisCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThisCount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionsToThisCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTransactionsToThisCount() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetTransactionsToThisCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThisCount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionsByTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTransactionsByTimestamp() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::TimePaginatedMessage, ::protocol::TransactionList>(std::bind(&WithStreamedUnaryMethod_GetTransactionsByTimestamp<BaseClass>::StreamedGetTransactionsByTimestamp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTransactionsByTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionsByTimestamp(::grpc::ServerContext* context, const ::protocol::TimePaginatedMessage* request, ::protocol::TransactionList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionsByTimestamp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TimePaginatedMessage,::protocol::TransactionList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionsByTimestampCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTransactionsByTimestampCount() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::TimeMessage, ::protocol::NumberMessage>(std::bind(&WithStreamedUnaryMethod_GetTransactionsByTimestampCount<BaseClass>::StreamedGetTransactionsByTimestampCount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTransactionsByTimestampCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionsByTimestampCount(::grpc::ServerContext* context, const ::protocol::TimeMessage* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionsByTimestampCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TimeMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionsFromThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTransactionsFromThis() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::AccountPaginated, ::protocol::TransactionList>(std::bind(&WithStreamedUnaryMethod_GetTransactionsFromThis<BaseClass>::StreamedGetTransactionsFromThis, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTransactionsFromThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionsFromThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionsFromThis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AccountPaginated,::protocol::TransactionList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionsToThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTransactionsToThis() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::AccountPaginated, ::protocol::TransactionList>(std::bind(&WithStreamedUnaryMethod_GetTransactionsToThis<BaseClass>::StreamedGetTransactionsToThis, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTransactionsToThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionsToThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionsToThis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AccountPaginated,::protocol::TransactionList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionsFromThisCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTransactionsFromThisCount() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::Account, ::protocol::NumberMessage>(std::bind(&WithStreamedUnaryMethod_GetTransactionsFromThisCount<BaseClass>::StreamedGetTransactionsFromThisCount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTransactionsFromThisCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionsFromThisCount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionsFromThisCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionsToThisCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTransactionsToThisCount() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::Account, ::protocol::NumberMessage>(std::bind(&WithStreamedUnaryMethod_GetTransactionsToThisCount<BaseClass>::StreamedGetTransactionsToThisCount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTransactionsToThisCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionsToThisCount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::NumberMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionsToThisCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetTransactionsByTimestamp<WithStreamedUnaryMethod_GetTransactionsByTimestampCount<WithStreamedUnaryMethod_GetTransactionsFromThis<WithStreamedUnaryMethod_GetTransactionsToThis<WithStreamedUnaryMethod_GetTransactionsFromThisCount<WithStreamedUnaryMethod_GetTransactionsToThisCount<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetTransactionsByTimestamp<WithStreamedUnaryMethod_GetTransactionsByTimestampCount<WithStreamedUnaryMethod_GetTransactionsFromThis<WithStreamedUnaryMethod_GetTransactionsToThis<WithStreamedUnaryMethod_GetTransactionsFromThisCount<WithStreamedUnaryMethod_GetTransactionsToThisCount<Service > > > > > > StreamedService;
};

// the api of tron's db
class Database final {
 public:
  static constexpr char const* service_full_name() {
    return "protocol.Database";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // for tapos
    virtual ::grpc::Status getBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BlockReference* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockReference>> AsyncgetBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockReference>>(AsyncgetBlockReferenceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::DynamicProperties* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DynamicProperties>> AsyncGetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DynamicProperties>>(AsyncGetDynamicPropertiesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetNowBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetBlockByNumRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockReference>* AsyncgetBlockReferenceRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DynamicProperties>* AsyncGetDynamicPropertiesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BlockReference* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockReference>> AsyncgetBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockReference>>(AsyncgetBlockReferenceRaw(context, request, cq));
    }
    ::grpc::Status GetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::DynamicProperties* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DynamicProperties>> AsyncGetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DynamicProperties>>(AsyncGetDynamicPropertiesRaw(context, request, cq));
    }
    ::grpc::Status GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetNowBlockRaw(context, request, cq));
    }
    ::grpc::Status GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetBlockByNumRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockReference>* AsyncgetBlockReferenceRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DynamicProperties>* AsyncGetDynamicPropertiesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getBlockReference_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDynamicProperties_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNowBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByNum_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // for tapos
    virtual ::grpc::Status getBlockReference(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response);
    virtual ::grpc::Status GetDynamicProperties(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response);
    virtual ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response);
    virtual ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getBlockReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getBlockReference() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getBlockReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlockReference(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetBlockReference(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BlockReference>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDynamicProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDynamicProperties() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetDynamicProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDynamicProperties(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDynamicProperties(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DynamicProperties>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNowBlock(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByNum(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getBlockReference<WithAsyncMethod_GetDynamicProperties<WithAsyncMethod_GetNowBlock<WithAsyncMethod_GetBlockByNum<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_getBlockReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getBlockReference() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getBlockReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlockReference(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDynamicProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDynamicProperties() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetDynamicProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDynamicProperties(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getBlockReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getBlockReference() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::EmptyMessage, ::protocol::BlockReference>(std::bind(&WithStreamedUnaryMethod_getBlockReference<BaseClass>::StreamedgetBlockReference, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getBlockReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getBlockReference(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetBlockReference(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::BlockReference>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDynamicProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetDynamicProperties() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::EmptyMessage, ::protocol::DynamicProperties>(std::bind(&WithStreamedUnaryMethod_GetDynamicProperties<BaseClass>::StreamedGetDynamicProperties, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDynamicProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDynamicProperties(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDynamicProperties(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::DynamicProperties>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::EmptyMessage, ::protocol::Block>(std::bind(&WithStreamedUnaryMethod_GetNowBlock<BaseClass>::StreamedGetNowBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNowBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::NumberMessage, ::protocol::Block>(std::bind(&WithStreamedUnaryMethod_GetBlockByNum<BaseClass>::StreamedGetBlockByNum, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getBlockReference<WithStreamedUnaryMethod_GetDynamicProperties<WithStreamedUnaryMethod_GetNowBlock<WithStreamedUnaryMethod_GetBlockByNum<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getBlockReference<WithStreamedUnaryMethod_GetDynamicProperties<WithStreamedUnaryMethod_GetNowBlock<WithStreamedUnaryMethod_GetBlockByNum<Service > > > > StreamedService;
};

// the api of tron's network such as node list.
class Network final {
 public:
  static constexpr char const* service_full_name() {
    return "protocol.Network";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
  private:
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
  };
  typedef Service AsyncService;
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace protocol


#endif  // GRPC_api_2fapi_2eproto__INCLUDED
