// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/api.proto

#include "api/api.pb.h"
#include "api/api.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace protocol {

static const char* Wallet_method_names[] = {
  "/protocol.Wallet/GetAccount",
  "/protocol.Wallet/CreateTransaction",
  "/protocol.Wallet/BroadcastTransaction",
  "/protocol.Wallet/UpdateAccount",
  "/protocol.Wallet/VoteWitnessAccount",
  "/protocol.Wallet/CreateAssetIssue",
  "/protocol.Wallet/UpdateWitness",
  "/protocol.Wallet/CreateWitness",
  "/protocol.Wallet/TransferAsset",
  "/protocol.Wallet/ParticipateAssetIssue",
  "/protocol.Wallet/FreezeBalance",
  "/protocol.Wallet/UnfreezeBalance",
  "/protocol.Wallet/UnfreezeAsset",
  "/protocol.Wallet/WithdrawBalance",
  "/protocol.Wallet/UpdateAsset",
  "/protocol.Wallet/ListNodes",
  "/protocol.Wallet/GetAssetIssueByAccount",
  "/protocol.Wallet/GetAccountNet",
  "/protocol.Wallet/GetAssetIssueByName",
  "/protocol.Wallet/GetNowBlock",
  "/protocol.Wallet/GetBlockByNum",
  "/protocol.Wallet/GetBlockById",
  "/protocol.Wallet/GetBlockByLimitNext",
  "/protocol.Wallet/GetBlockByLatestNum",
  "/protocol.Wallet/GetTransactionById",
  "/protocol.Wallet/ListWitnesses",
  "/protocol.Wallet/GetAssetIssueList",
  "/protocol.Wallet/TotalTransaction",
  "/protocol.Wallet/GetNextMaintenanceTime",
};

std::unique_ptr< Wallet::Stub> Wallet::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Wallet::Stub> stub(new Wallet::Stub(channel));
  return stub;
}

Wallet::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetAccount_(Wallet_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTransaction_(Wallet_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BroadcastTransaction_(Wallet_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAccount_(Wallet_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VoteWitnessAccount_(Wallet_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAssetIssue_(Wallet_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateWitness_(Wallet_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateWitness_(Wallet_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferAsset_(Wallet_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParticipateAssetIssue_(Wallet_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FreezeBalance_(Wallet_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnfreezeBalance_(Wallet_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnfreezeAsset_(Wallet_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WithdrawBalance_(Wallet_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAsset_(Wallet_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNodes_(Wallet_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueByAccount_(Wallet_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccountNet_(Wallet_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueByName_(Wallet_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNowBlock_(Wallet_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByNum_(Wallet_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockById_(Wallet_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByLimitNext_(Wallet_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByLatestNum_(Wallet_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionById_(Wallet_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListWitnesses_(Wallet_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueList_(Wallet_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TotalTransaction_(Wallet_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNextMaintenanceTime_(Wallet_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Wallet::Stub::GetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAccount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Account>* Wallet::Stub::AsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Account>::internal::Create(channel_.get(), cq, rpcmethod_GetAccount_, context, request);
}

::grpc::Status Wallet::Stub::CreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTransaction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncCreateTransactionRaw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_CreateTransaction_, context, request);
}

::grpc::Status Wallet::Stub::BroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::Return* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BroadcastTransaction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Return>* Wallet::Stub::AsyncBroadcastTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Return>::internal::Create(channel_.get(), cq, rpcmethod_BroadcastTransaction_, context, request);
}

::grpc::Status Wallet::Stub::UpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateAccount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncUpdateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_UpdateAccount_, context, request);
}

::grpc::Status Wallet::Stub::VoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VoteWitnessAccount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncVoteWitnessAccountRaw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_VoteWitnessAccount_, context, request);
}

::grpc::Status Wallet::Stub::CreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateAssetIssue_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncCreateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_CreateAssetIssue_, context, request);
}

::grpc::Status Wallet::Stub::UpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateWitness_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncUpdateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_UpdateWitness_, context, request);
}

::grpc::Status Wallet::Stub::CreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateWitness_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncCreateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_CreateWitness_, context, request);
}

::grpc::Status Wallet::Stub::TransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TransferAsset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_TransferAsset_, context, request);
}

::grpc::Status Wallet::Stub::ParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ParticipateAssetIssue_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncParticipateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_ParticipateAssetIssue_, context, request);
}

::grpc::Status Wallet::Stub::FreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FreezeBalance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncFreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_FreezeBalance_, context, request);
}

::grpc::Status Wallet::Stub::UnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnfreezeBalance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncUnfreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_UnfreezeBalance_, context, request);
}

::grpc::Status Wallet::Stub::UnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnfreezeAsset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncUnfreezeAssetRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_UnfreezeAsset_, context, request);
}

::grpc::Status Wallet::Stub::WithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WithdrawBalance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncWithdrawBalanceRaw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_WithdrawBalance_, context, request);
}

::grpc::Status Wallet::Stub::UpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateAsset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncUpdateAssetRaw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_UpdateAsset_, context, request);
}

::grpc::Status Wallet::Stub::ListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NodeList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListNodes_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::NodeList>* Wallet::Stub::AsyncListNodesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::NodeList>::internal::Create(channel_.get(), cq, rpcmethod_ListNodes_, context, request);
}

::grpc::Status Wallet::Stub::GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AssetIssueList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAssetIssueByAccount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* Wallet::Stub::AsyncGetAssetIssueByAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>::internal::Create(channel_.get(), cq, rpcmethod_GetAssetIssueByAccount_, context, request);
}

::grpc::Status Wallet::Stub::GetAccountNet(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AccountNetMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAccountNet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::AccountNetMessage>* Wallet::Stub::AsyncGetAccountNetRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::AccountNetMessage>::internal::Create(channel_.get(), cq, rpcmethod_GetAccountNet_, context, request);
}

::grpc::Status Wallet::Stub::GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAssetIssueByName_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* Wallet::Stub::AsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>::internal::Create(channel_.get(), cq, rpcmethod_GetAssetIssueByName_, context, request);
}

::grpc::Status Wallet::Stub::GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNowBlock_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Wallet::Stub::AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Block>::internal::Create(channel_.get(), cq, rpcmethod_GetNowBlock_, context, request);
}

::grpc::Status Wallet::Stub::GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockByNum_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Wallet::Stub::AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Block>::internal::Create(channel_.get(), cq, rpcmethod_GetBlockByNum_, context, request);
}

::grpc::Status Wallet::Stub::GetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockById_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Wallet::Stub::AsyncGetBlockByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Block>::internal::Create(channel_.get(), cq, rpcmethod_GetBlockById_, context, request);
}

::grpc::Status Wallet::Stub::GetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::protocol::BlockList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockByLimitNext_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockList>* Wallet::Stub::AsyncGetBlockByLimitNextRaw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>::internal::Create(channel_.get(), cq, rpcmethod_GetBlockByLimitNext_, context, request);
}

::grpc::Status Wallet::Stub::GetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockByLatestNum_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockList>* Wallet::Stub::AsyncGetBlockByLatestNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>::internal::Create(channel_.get(), cq, rpcmethod_GetBlockByLatestNum_, context, request);
}

::grpc::Status Wallet::Stub::GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransactionById_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_GetTransactionById_, context, request);
}

::grpc::Status Wallet::Stub::ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::WitnessList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListWitnesses_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>* Wallet::Stub::AsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>::internal::Create(channel_.get(), cq, rpcmethod_ListWitnesses_, context, request);
}

::grpc::Status Wallet::Stub::GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AssetIssueList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAssetIssueList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* Wallet::Stub::AsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>::internal::Create(channel_.get(), cq, rpcmethod_GetAssetIssueList_, context, request);
}

::grpc::Status Wallet::Stub::TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TotalTransaction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* Wallet::Stub::AsyncTotalTransactionRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>::internal::Create(channel_.get(), cq, rpcmethod_TotalTransaction_, context, request);
}

::grpc::Status Wallet::Stub::GetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNextMaintenanceTime_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* Wallet::Stub::AsyncGetNextMaintenanceTimeRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>::internal::Create(channel_.get(), cq, rpcmethod_GetNextMaintenanceTime_, context, request);
}

Wallet::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Account, ::protocol::Account>(
          std::mem_fn(&Wallet::Service::GetAccount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::TransferContract, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::CreateTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Transaction, ::protocol::Return>(
          std::mem_fn(&Wallet::Service::BroadcastTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::AccountUpdateContract, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::UpdateAccount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::VoteWitnessContract, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::VoteWitnessAccount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::AssetIssueContract, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::CreateAssetIssue), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::WitnessUpdateContract, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::UpdateWitness), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::WitnessCreateContract, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::CreateWitness), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::TransferAssetContract, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::TransferAsset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::ParticipateAssetIssueContract, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::ParticipateAssetIssue), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::FreezeBalanceContract, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::FreezeBalance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::UnfreezeBalanceContract, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::UnfreezeBalance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::UnfreezeAssetContract, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::UnfreezeAsset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::WithdrawBalanceContract, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::WithdrawBalance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::UpdateAssetContract, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::UpdateAsset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::NodeList>(
          std::mem_fn(&Wallet::Service::ListNodes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Account, ::protocol::AssetIssueList>(
          std::mem_fn(&Wallet::Service::GetAssetIssueByAccount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Account, ::protocol::AccountNetMessage>(
          std::mem_fn(&Wallet::Service::GetAccountNet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::AssetIssueContract>(
          std::mem_fn(&Wallet::Service::GetAssetIssueByName), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::Block>(
          std::mem_fn(&Wallet::Service::GetNowBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::NumberMessage, ::protocol::Block>(
          std::mem_fn(&Wallet::Service::GetBlockByNum), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::Block>(
          std::mem_fn(&Wallet::Service::GetBlockById), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BlockLimit, ::protocol::BlockList>(
          std::mem_fn(&Wallet::Service::GetBlockByLimitNext), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::NumberMessage, ::protocol::BlockList>(
          std::mem_fn(&Wallet::Service::GetBlockByLatestNum), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::Transaction>(
          std::mem_fn(&Wallet::Service::GetTransactionById), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::WitnessList>(
          std::mem_fn(&Wallet::Service::ListWitnesses), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::AssetIssueList>(
          std::mem_fn(&Wallet::Service::GetAssetIssueList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::NumberMessage>(
          std::mem_fn(&Wallet::Service::TotalTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::NumberMessage>(
          std::mem_fn(&Wallet::Service::GetNextMaintenanceTime), this)));
}

Wallet::Service::~Service() {
}

::grpc::Status Wallet::Service::GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateTransaction(::grpc::ServerContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::BroadcastTransaction(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::Return* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UpdateAccount(::grpc::ServerContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::VoteWitnessAccount(::grpc::ServerContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateAssetIssue(::grpc::ServerContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UpdateWitness(::grpc::ServerContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateWitness(::grpc::ServerContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::TransferAsset(::grpc::ServerContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ParticipateAssetIssue(::grpc::ServerContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::FreezeBalance(::grpc::ServerContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UnfreezeBalance(::grpc::ServerContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UnfreezeAsset(::grpc::ServerContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::WithdrawBalance(::grpc::ServerContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UpdateAsset(::grpc::ServerContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ListNodes(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAssetIssueByAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAccountNet(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetBlockById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetBlockByLimitNext(::grpc::ServerContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetBlockByLatestNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::TotalTransaction(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetNextMaintenanceTime(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WalletSolidity_method_names[] = {
  "/protocol.WalletSolidity/GetAccount",
  "/protocol.WalletSolidity/ListWitnesses",
  "/protocol.WalletSolidity/GetAssetIssueList",
  "/protocol.WalletSolidity/GetAssetIssueListByTimestamp",
  "/protocol.WalletSolidity/GetAssetIssueByAccount",
  "/protocol.WalletSolidity/GetAssetIssueByName",
  "/protocol.WalletSolidity/GetNowBlock",
  "/protocol.WalletSolidity/GetBlockByNum",
  "/protocol.WalletSolidity/TotalTransaction",
  "/protocol.WalletSolidity/GetTransactionById",
};

std::unique_ptr< WalletSolidity::Stub> WalletSolidity::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< WalletSolidity::Stub> stub(new WalletSolidity::Stub(channel));
  return stub;
}

WalletSolidity::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetAccount_(WalletSolidity_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListWitnesses_(WalletSolidity_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueList_(WalletSolidity_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueListByTimestamp_(WalletSolidity_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueByAccount_(WalletSolidity_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueByName_(WalletSolidity_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNowBlock_(WalletSolidity_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByNum_(WalletSolidity_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TotalTransaction_(WalletSolidity_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionById_(WalletSolidity_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WalletSolidity::Stub::GetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAccount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Account>* WalletSolidity::Stub::AsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Account>::internal::Create(channel_.get(), cq, rpcmethod_GetAccount_, context, request);
}

::grpc::Status WalletSolidity::Stub::ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::WitnessList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListWitnesses_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>* WalletSolidity::Stub::AsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>::internal::Create(channel_.get(), cq, rpcmethod_ListWitnesses_, context, request);
}

::grpc::Status WalletSolidity::Stub::GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AssetIssueList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAssetIssueList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* WalletSolidity::Stub::AsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>::internal::Create(channel_.get(), cq, rpcmethod_GetAssetIssueList_, context, request);
}

::grpc::Status WalletSolidity::Stub::GetAssetIssueListByTimestamp(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::AssetIssueList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAssetIssueListByTimestamp_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* WalletSolidity::Stub::AsyncGetAssetIssueListByTimestampRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>::internal::Create(channel_.get(), cq, rpcmethod_GetAssetIssueListByTimestamp_, context, request);
}

::grpc::Status WalletSolidity::Stub::GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AssetIssueList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAssetIssueByAccount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* WalletSolidity::Stub::AsyncGetAssetIssueByAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>::internal::Create(channel_.get(), cq, rpcmethod_GetAssetIssueByAccount_, context, request);
}

::grpc::Status WalletSolidity::Stub::GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAssetIssueByName_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* WalletSolidity::Stub::AsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>::internal::Create(channel_.get(), cq, rpcmethod_GetAssetIssueByName_, context, request);
}

::grpc::Status WalletSolidity::Stub::GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNowBlock_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* WalletSolidity::Stub::AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Block>::internal::Create(channel_.get(), cq, rpcmethod_GetNowBlock_, context, request);
}

::grpc::Status WalletSolidity::Stub::GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockByNum_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* WalletSolidity::Stub::AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Block>::internal::Create(channel_.get(), cq, rpcmethod_GetBlockByNum_, context, request);
}

::grpc::Status WalletSolidity::Stub::TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TotalTransaction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* WalletSolidity::Stub::AsyncTotalTransactionRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>::internal::Create(channel_.get(), cq, rpcmethod_TotalTransaction_, context, request);
}

::grpc::Status WalletSolidity::Stub::GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransactionById_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* WalletSolidity::Stub::AsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>::internal::Create(channel_.get(), cq, rpcmethod_GetTransactionById_, context, request);
}

WalletSolidity::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::Account, ::protocol::Account>(
          std::mem_fn(&WalletSolidity::Service::GetAccount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::EmptyMessage, ::protocol::WitnessList>(
          std::mem_fn(&WalletSolidity::Service::ListWitnesses), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::EmptyMessage, ::protocol::AssetIssueList>(
          std::mem_fn(&WalletSolidity::Service::GetAssetIssueList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::NumberMessage, ::protocol::AssetIssueList>(
          std::mem_fn(&WalletSolidity::Service::GetAssetIssueListByTimestamp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::Account, ::protocol::AssetIssueList>(
          std::mem_fn(&WalletSolidity::Service::GetAssetIssueByAccount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::BytesMessage, ::protocol::AssetIssueContract>(
          std::mem_fn(&WalletSolidity::Service::GetAssetIssueByName), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::EmptyMessage, ::protocol::Block>(
          std::mem_fn(&WalletSolidity::Service::GetNowBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::NumberMessage, ::protocol::Block>(
          std::mem_fn(&WalletSolidity::Service::GetBlockByNum), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::EmptyMessage, ::protocol::NumberMessage>(
          std::mem_fn(&WalletSolidity::Service::TotalTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::BytesMessage, ::protocol::Transaction>(
          std::mem_fn(&WalletSolidity::Service::GetTransactionById), this)));
}

WalletSolidity::Service::~Service() {
}

::grpc::Status WalletSolidity::Service::GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetAssetIssueListByTimestamp(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::AssetIssueList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetAssetIssueByAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::TotalTransaction(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WalletExtension_method_names[] = {
  "/protocol.WalletExtension/GetTransactionsByTimestamp",
  "/protocol.WalletExtension/GetTransactionsByTimestampCount",
  "/protocol.WalletExtension/GetTransactionsFromThis",
  "/protocol.WalletExtension/GetTransactionsToThis",
  "/protocol.WalletExtension/GetTransactionsFromThisCount",
  "/protocol.WalletExtension/GetTransactionsToThisCount",
};

std::unique_ptr< WalletExtension::Stub> WalletExtension::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< WalletExtension::Stub> stub(new WalletExtension::Stub(channel));
  return stub;
}

WalletExtension::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetTransactionsByTimestamp_(WalletExtension_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionsByTimestampCount_(WalletExtension_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionsFromThis_(WalletExtension_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionsToThis_(WalletExtension_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionsFromThisCount_(WalletExtension_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionsToThisCount_(WalletExtension_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WalletExtension::Stub::GetTransactionsByTimestamp(::grpc::ClientContext* context, const ::protocol::TimePaginatedMessage& request, ::protocol::TransactionList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransactionsByTimestamp_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* WalletExtension::Stub::AsyncGetTransactionsByTimestampRaw(::grpc::ClientContext* context, const ::protocol::TimePaginatedMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>::internal::Create(channel_.get(), cq, rpcmethod_GetTransactionsByTimestamp_, context, request);
}

::grpc::Status WalletExtension::Stub::GetTransactionsByTimestampCount(::grpc::ClientContext* context, const ::protocol::TimeMessage& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransactionsByTimestampCount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* WalletExtension::Stub::AsyncGetTransactionsByTimestampCountRaw(::grpc::ClientContext* context, const ::protocol::TimeMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>::internal::Create(channel_.get(), cq, rpcmethod_GetTransactionsByTimestampCount_, context, request);
}

::grpc::Status WalletExtension::Stub::GetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransactionsFromThis_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* WalletExtension::Stub::AsyncGetTransactionsFromThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>::internal::Create(channel_.get(), cq, rpcmethod_GetTransactionsFromThis_, context, request);
}

::grpc::Status WalletExtension::Stub::GetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransactionsToThis_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* WalletExtension::Stub::AsyncGetTransactionsToThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>::internal::Create(channel_.get(), cq, rpcmethod_GetTransactionsToThis_, context, request);
}

::grpc::Status WalletExtension::Stub::GetTransactionsFromThisCount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransactionsFromThisCount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* WalletExtension::Stub::AsyncGetTransactionsFromThisCountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>::internal::Create(channel_.get(), cq, rpcmethod_GetTransactionsFromThisCount_, context, request);
}

::grpc::Status WalletExtension::Stub::GetTransactionsToThisCount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransactionsToThisCount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* WalletExtension::Stub::AsyncGetTransactionsToThisCountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>::internal::Create(channel_.get(), cq, rpcmethod_GetTransactionsToThisCount_, context, request);
}

WalletExtension::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletExtension_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletExtension::Service, ::protocol::TimePaginatedMessage, ::protocol::TransactionList>(
          std::mem_fn(&WalletExtension::Service::GetTransactionsByTimestamp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletExtension_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletExtension::Service, ::protocol::TimeMessage, ::protocol::NumberMessage>(
          std::mem_fn(&WalletExtension::Service::GetTransactionsByTimestampCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletExtension_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletExtension::Service, ::protocol::AccountPaginated, ::protocol::TransactionList>(
          std::mem_fn(&WalletExtension::Service::GetTransactionsFromThis), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletExtension_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletExtension::Service, ::protocol::AccountPaginated, ::protocol::TransactionList>(
          std::mem_fn(&WalletExtension::Service::GetTransactionsToThis), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletExtension_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletExtension::Service, ::protocol::Account, ::protocol::NumberMessage>(
          std::mem_fn(&WalletExtension::Service::GetTransactionsFromThisCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletExtension_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletExtension::Service, ::protocol::Account, ::protocol::NumberMessage>(
          std::mem_fn(&WalletExtension::Service::GetTransactionsToThisCount), this)));
}

WalletExtension::Service::~Service() {
}

::grpc::Status WalletExtension::Service::GetTransactionsByTimestamp(::grpc::ServerContext* context, const ::protocol::TimePaginatedMessage* request, ::protocol::TransactionList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletExtension::Service::GetTransactionsByTimestampCount(::grpc::ServerContext* context, const ::protocol::TimeMessage* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletExtension::Service::GetTransactionsFromThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletExtension::Service::GetTransactionsToThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletExtension::Service::GetTransactionsFromThisCount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletExtension::Service::GetTransactionsToThisCount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Database_method_names[] = {
  "/protocol.Database/getBlockReference",
  "/protocol.Database/GetDynamicProperties",
  "/protocol.Database/GetNowBlock",
  "/protocol.Database/GetBlockByNum",
};

std::unique_ptr< Database::Stub> Database::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Database::Stub> stub(new Database::Stub(channel));
  return stub;
}

Database::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getBlockReference_(Database_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDynamicProperties_(Database_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNowBlock_(Database_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByNum_(Database_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Database::Stub::getBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BlockReference* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getBlockReference_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockReference>* Database::Stub::AsyncgetBlockReferenceRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::BlockReference>::internal::Create(channel_.get(), cq, rpcmethod_getBlockReference_, context, request);
}

::grpc::Status Database::Stub::GetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::DynamicProperties* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDynamicProperties_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::DynamicProperties>* Database::Stub::AsyncGetDynamicPropertiesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::DynamicProperties>::internal::Create(channel_.get(), cq, rpcmethod_GetDynamicProperties_, context, request);
}

::grpc::Status Database::Stub::GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNowBlock_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Database::Stub::AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Block>::internal::Create(channel_.get(), cq, rpcmethod_GetNowBlock_, context, request);
}

::grpc::Status Database::Stub::GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockByNum_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Database::Stub::AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::protocol::Block>::internal::Create(channel_.get(), cq, rpcmethod_GetBlockByNum_, context, request);
}

Database::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::protocol::EmptyMessage, ::protocol::BlockReference>(
          std::mem_fn(&Database::Service::getBlockReference), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::protocol::EmptyMessage, ::protocol::DynamicProperties>(
          std::mem_fn(&Database::Service::GetDynamicProperties), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::protocol::EmptyMessage, ::protocol::Block>(
          std::mem_fn(&Database::Service::GetNowBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::protocol::NumberMessage, ::protocol::Block>(
          std::mem_fn(&Database::Service::GetBlockByNum), this)));
}

Database::Service::~Service() {
}

::grpc::Status Database::Service::getBlockReference(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Database::Service::GetDynamicProperties(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Database::Service::GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Database::Service::GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


std::unique_ptr< Network::Stub> Network::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Network::Stub> stub(new Network::Stub(channel));
  return stub;
}

Network::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel){}

Network::Service::Service() {
}

Network::Service::~Service() {
}


}  // namespace protocol

