// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/Discover.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "core/Discover.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
class EndpointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Endpoint>
     _instance;
} _Endpoint_default_instance_;
class PingMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PingMessage>
     _instance;
} _PingMessage_default_instance_;
class PongMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PongMessage>
     _instance;
} _PongMessage_default_instance_;
class FindNeighboursDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FindNeighbours>
     _instance;
} _FindNeighbours_default_instance_;
class NeighboursDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Neighbours>
     _instance;
} _Neighbours_default_instance_;

namespace protobuf_core_2fDiscover_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, nodeid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingMessage, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingMessage, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingMessage, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingMessage, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongMessage, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongMessage, echo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongMessage, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNeighbours, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNeighbours, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNeighbours, targetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNeighbours, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neighbours, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neighbours, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neighbours, neighbours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neighbours, timestamp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Endpoint)},
  { 8, -1, sizeof(PingMessage)},
  { 17, -1, sizeof(PongMessage)},
  { 25, -1, sizeof(FindNeighbours)},
  { 33, -1, sizeof(Neighbours)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Endpoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PingMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PongMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FindNeighbours_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Neighbours_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "core/Discover.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Endpoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Endpoint_default_instance_);_PingMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PingMessage_default_instance_);_PongMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PongMessage_default_instance_);_FindNeighbours_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FindNeighbours_default_instance_);_Neighbours_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Neighbours_default_instance_);_PingMessage_default_instance_._instance.get_mutable()->from_ = const_cast< ::protocol::Endpoint*>(
      ::protocol::Endpoint::internal_default_instance());
  _PingMessage_default_instance_._instance.get_mutable()->to_ = const_cast< ::protocol::Endpoint*>(
      ::protocol::Endpoint::internal_default_instance());
  _PongMessage_default_instance_._instance.get_mutable()->from_ = const_cast< ::protocol::Endpoint*>(
      ::protocol::Endpoint::internal_default_instance());
  _FindNeighbours_default_instance_._instance.get_mutable()->from_ = const_cast< ::protocol::Endpoint*>(
      ::protocol::Endpoint::internal_default_instance());
  _Neighbours_default_instance_._instance.get_mutable()->from_ = const_cast< ::protocol::Endpoint*>(
      ::protocol::Endpoint::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023core/Discover.proto\022\010protocol\"9\n\010Endpo"
      "int\022\017\n\007address\030\001 \001(\014\022\014\n\004port\030\002 \001(\005\022\016\n\006no"
      "deId\030\003 \001(\014\"s\n\013PingMessage\022 \n\004from\030\001 \001(\0132"
      "\022.protocol.Endpoint\022\036\n\002to\030\002 \001(\0132\022.protoc"
      "ol.Endpoint\022\017\n\007version\030\003 \001(\005\022\021\n\ttimestam"
      "p\030\004 \001(\003\"P\n\013PongMessage\022 \n\004from\030\001 \001(\0132\022.p"
      "rotocol.Endpoint\022\014\n\004echo\030\002 \001(\005\022\021\n\ttimest"
      "amp\030\003 \001(\003\"W\n\016FindNeighbours\022 \n\004from\030\001 \001("
      "\0132\022.protocol.Endpoint\022\020\n\010targetId\030\002 \001(\014\022"
      "\021\n\ttimestamp\030\003 \001(\003\"i\n\nNeighbours\022 \n\004from"
      "\030\001 \001(\0132\022.protocol.Endpoint\022&\n\nneighbours"
      "\030\002 \003(\0132\022.protocol.Endpoint\022\021\n\ttimestamp\030"
      "\003 \001(\003BF\n\017org.tron.protosB\010DiscoverZ)gith"
      "ub.com/tronprotocol/grpc-gateway/coreb\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 565);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "core/Discover.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_core_2fDiscover_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Endpoint::kAddressFieldNumber;
const int Endpoint::kPortFieldNumber;
const int Endpoint::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Endpoint::Endpoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_core_2fDiscover_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Endpoint)
}
Endpoint::Endpoint(const Endpoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  nodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nodeid().size() > 0) {
    nodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:protocol.Endpoint)
}

void Endpoint::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _cached_size_ = 0;
}

Endpoint::~Endpoint() {
  // @@protoc_insertion_point(destructor:protocol.Endpoint)
  SharedDtor();
}

void Endpoint::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Endpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Endpoint::descriptor() {
  protobuf_core_2fDiscover_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_core_2fDiscover_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Endpoint& Endpoint::default_instance() {
  protobuf_core_2fDiscover_2eproto::InitDefaults();
  return *internal_default_instance();
}

Endpoint* Endpoint::New(::google::protobuf::Arena* arena) const {
  Endpoint* n = new Endpoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Endpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Endpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

bool Endpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Endpoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes nodeId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nodeid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Endpoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Endpoint)
  return false;
#undef DO_
}

void Endpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Endpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // bytes nodeId = 3;
  if (this->nodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nodeid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Endpoint)
}

::google::protobuf::uint8* Endpoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Endpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // bytes nodeId = 3;
  if (this->nodeid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nodeid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Endpoint)
  return target;
}

size_t Endpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Endpoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->address());
  }

  // bytes nodeId = 3;
  if (this->nodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nodeid());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Endpoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Endpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Endpoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Endpoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Endpoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Endpoint)
    MergeFrom(*source);
  }
}

void Endpoint::MergeFrom(const Endpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Endpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.nodeid().size() > 0) {

    nodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void Endpoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Endpoint::CopyFrom(const Endpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Endpoint::IsInitialized() const {
  return true;
}

void Endpoint::Swap(Endpoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Endpoint::InternalSwap(Endpoint* other) {
  using std::swap;
  address_.Swap(&other->address_);
  nodeid_.Swap(&other->nodeid_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Endpoint::GetMetadata() const {
  protobuf_core_2fDiscover_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_core_2fDiscover_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Endpoint

// bytes address = 1;
void Endpoint::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Endpoint::address() const {
  // @@protoc_insertion_point(field_get:protocol.Endpoint.address)
  return address_.GetNoArena();
}
void Endpoint::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Endpoint.address)
}
#if LANG_CXX11
void Endpoint::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Endpoint.address)
}
#endif
void Endpoint::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Endpoint.address)
}
void Endpoint::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Endpoint.address)
}
::std::string* Endpoint::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Endpoint.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Endpoint::release_address() {
  // @@protoc_insertion_point(field_release:protocol.Endpoint.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Endpoint::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Endpoint.address)
}

// int32 port = 2;
void Endpoint::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 Endpoint::port() const {
  // @@protoc_insertion_point(field_get:protocol.Endpoint.port)
  return port_;
}
void Endpoint::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:protocol.Endpoint.port)
}

// bytes nodeId = 3;
void Endpoint::clear_nodeid() {
  nodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Endpoint::nodeid() const {
  // @@protoc_insertion_point(field_get:protocol.Endpoint.nodeId)
  return nodeid_.GetNoArena();
}
void Endpoint::set_nodeid(const ::std::string& value) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Endpoint.nodeId)
}
#if LANG_CXX11
void Endpoint::set_nodeid(::std::string&& value) {
  
  nodeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Endpoint.nodeId)
}
#endif
void Endpoint::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Endpoint.nodeId)
}
void Endpoint::set_nodeid(const void* value, size_t size) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Endpoint.nodeId)
}
::std::string* Endpoint::mutable_nodeid() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Endpoint.nodeId)
  return nodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Endpoint::release_nodeid() {
  // @@protoc_insertion_point(field_release:protocol.Endpoint.nodeId)
  
  return nodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Endpoint::set_allocated_nodeid(::std::string* nodeid) {
  if (nodeid != NULL) {
    
  } else {
    
  }
  nodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodeid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Endpoint.nodeId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingMessage::kFromFieldNumber;
const int PingMessage::kToFieldNumber;
const int PingMessage::kVersionFieldNumber;
const int PingMessage::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingMessage::PingMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_core_2fDiscover_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PingMessage)
}
PingMessage::PingMessage(const PingMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_from()) {
    from_ = new ::protocol::Endpoint(*from.from_);
  } else {
    from_ = NULL;
  }
  if (from.has_to()) {
    to_ = new ::protocol::Endpoint(*from.to_);
  } else {
    to_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:protocol.PingMessage)
}

void PingMessage::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&from_)) + sizeof(version_));
  _cached_size_ = 0;
}

PingMessage::~PingMessage() {
  // @@protoc_insertion_point(destructor:protocol.PingMessage)
  SharedDtor();
}

void PingMessage::SharedDtor() {
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
}

void PingMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingMessage::descriptor() {
  protobuf_core_2fDiscover_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_core_2fDiscover_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PingMessage& PingMessage::default_instance() {
  protobuf_core_2fDiscover_2eproto::InitDefaults();
  return *internal_default_instance();
}

PingMessage* PingMessage::New(::google::protobuf::Arena* arena) const {
  PingMessage* n = new PingMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PingMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && from_ != NULL) {
    delete from_;
  }
  from_ = NULL;
  if (GetArenaNoVirtual() == NULL && to_ != NULL) {
    delete to_;
  }
  to_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

bool PingMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PingMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.Endpoint from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.Endpoint to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PingMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PingMessage)
  return false;
#undef DO_
}

void PingMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PingMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->from_, output);
  }

  // .protocol.Endpoint to = 2;
  if (this->has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->to_, output);
  }

  // int32 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PingMessage)
}

::google::protobuf::uint8* PingMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PingMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->from_, deterministic, target);
  }

  // .protocol.Endpoint to = 2;
  if (this->has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->to_, deterministic, target);
  }

  // int32 version = 3;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->version(), target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PingMessage)
  return target;
}

size_t PingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PingMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->from_);
  }

  // .protocol.Endpoint to = 2;
  if (this->has_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->to_);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.PingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PingMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.PingMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.PingMessage)
    MergeFrom(*source);
  }
}

void PingMessage::MergeFrom(const PingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_from()) {
    mutable_from()->::protocol::Endpoint::MergeFrom(from.from());
  }
  if (from.has_to()) {
    mutable_to()->::protocol::Endpoint::MergeFrom(from.to());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void PingMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.PingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingMessage::CopyFrom(const PingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingMessage::IsInitialized() const {
  return true;
}

void PingMessage::Swap(PingMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingMessage::InternalSwap(PingMessage* other) {
  using std::swap;
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(timestamp_, other->timestamp_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingMessage::GetMetadata() const {
  protobuf_core_2fDiscover_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_core_2fDiscover_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingMessage

// .protocol.Endpoint from = 1;
bool PingMessage::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
void PingMessage::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
  from_ = NULL;
}
const ::protocol::Endpoint& PingMessage::from() const {
  const ::protocol::Endpoint* p = from_;
  // @@protoc_insertion_point(field_get:protocol.PingMessage.from)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
::protocol::Endpoint* PingMessage::mutable_from() {
  
  if (from_ == NULL) {
    from_ = new ::protocol::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PingMessage.from)
  return from_;
}
::protocol::Endpoint* PingMessage::release_from() {
  // @@protoc_insertion_point(field_release:protocol.PingMessage.from)
  
  ::protocol::Endpoint* temp = from_;
  from_ = NULL;
  return temp;
}
void PingMessage::set_allocated_from(::protocol::Endpoint* from) {
  delete from_;
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PingMessage.from)
}

// .protocol.Endpoint to = 2;
bool PingMessage::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
void PingMessage::clear_to() {
  if (GetArenaNoVirtual() == NULL && to_ != NULL) delete to_;
  to_ = NULL;
}
const ::protocol::Endpoint& PingMessage::to() const {
  const ::protocol::Endpoint* p = to_;
  // @@protoc_insertion_point(field_get:protocol.PingMessage.to)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
::protocol::Endpoint* PingMessage::mutable_to() {
  
  if (to_ == NULL) {
    to_ = new ::protocol::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PingMessage.to)
  return to_;
}
::protocol::Endpoint* PingMessage::release_to() {
  // @@protoc_insertion_point(field_release:protocol.PingMessage.to)
  
  ::protocol::Endpoint* temp = to_;
  to_ = NULL;
  return temp;
}
void PingMessage::set_allocated_to(::protocol::Endpoint* to) {
  delete to_;
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PingMessage.to)
}

// int32 version = 3;
void PingMessage::clear_version() {
  version_ = 0;
}
::google::protobuf::int32 PingMessage::version() const {
  // @@protoc_insertion_point(field_get:protocol.PingMessage.version)
  return version_;
}
void PingMessage::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.PingMessage.version)
}

// int64 timestamp = 4;
void PingMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PingMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.PingMessage.timestamp)
  return timestamp_;
}
void PingMessage::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.PingMessage.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PongMessage::kFromFieldNumber;
const int PongMessage::kEchoFieldNumber;
const int PongMessage::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PongMessage::PongMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_core_2fDiscover_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PongMessage)
}
PongMessage::PongMessage(const PongMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_from()) {
    from_ = new ::protocol::Endpoint(*from.from_);
  } else {
    from_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&echo_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(echo_));
  // @@protoc_insertion_point(copy_constructor:protocol.PongMessage)
}

void PongMessage::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&echo_) -
      reinterpret_cast<char*>(&from_)) + sizeof(echo_));
  _cached_size_ = 0;
}

PongMessage::~PongMessage() {
  // @@protoc_insertion_point(destructor:protocol.PongMessage)
  SharedDtor();
}

void PongMessage::SharedDtor() {
  if (this != internal_default_instance()) delete from_;
}

void PongMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PongMessage::descriptor() {
  protobuf_core_2fDiscover_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_core_2fDiscover_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PongMessage& PongMessage::default_instance() {
  protobuf_core_2fDiscover_2eproto::InitDefaults();
  return *internal_default_instance();
}

PongMessage* PongMessage::New(::google::protobuf::Arena* arena) const {
  PongMessage* n = new PongMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PongMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PongMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && from_ != NULL) {
    delete from_;
  }
  from_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&echo_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(echo_));
  _internal_metadata_.Clear();
}

bool PongMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PongMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.Endpoint from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 echo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &echo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PongMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PongMessage)
  return false;
#undef DO_
}

void PongMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PongMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->from_, output);
  }

  // int32 echo = 2;
  if (this->echo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->echo(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PongMessage)
}

::google::protobuf::uint8* PongMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PongMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->from_, deterministic, target);
  }

  // int32 echo = 2;
  if (this->echo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->echo(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PongMessage)
  return target;
}

size_t PongMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PongMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->from_);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 echo = 2;
  if (this->echo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->echo());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PongMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.PongMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PongMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PongMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.PongMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.PongMessage)
    MergeFrom(*source);
  }
}

void PongMessage::MergeFrom(const PongMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PongMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_from()) {
    mutable_from()->::protocol::Endpoint::MergeFrom(from.from());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.echo() != 0) {
    set_echo(from.echo());
  }
}

void PongMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.PongMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PongMessage::CopyFrom(const PongMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PongMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PongMessage::IsInitialized() const {
  return true;
}

void PongMessage::Swap(PongMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PongMessage::InternalSwap(PongMessage* other) {
  using std::swap;
  swap(from_, other->from_);
  swap(timestamp_, other->timestamp_);
  swap(echo_, other->echo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PongMessage::GetMetadata() const {
  protobuf_core_2fDiscover_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_core_2fDiscover_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PongMessage

// .protocol.Endpoint from = 1;
bool PongMessage::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
void PongMessage::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
  from_ = NULL;
}
const ::protocol::Endpoint& PongMessage::from() const {
  const ::protocol::Endpoint* p = from_;
  // @@protoc_insertion_point(field_get:protocol.PongMessage.from)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
::protocol::Endpoint* PongMessage::mutable_from() {
  
  if (from_ == NULL) {
    from_ = new ::protocol::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PongMessage.from)
  return from_;
}
::protocol::Endpoint* PongMessage::release_from() {
  // @@protoc_insertion_point(field_release:protocol.PongMessage.from)
  
  ::protocol::Endpoint* temp = from_;
  from_ = NULL;
  return temp;
}
void PongMessage::set_allocated_from(::protocol::Endpoint* from) {
  delete from_;
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PongMessage.from)
}

// int32 echo = 2;
void PongMessage::clear_echo() {
  echo_ = 0;
}
::google::protobuf::int32 PongMessage::echo() const {
  // @@protoc_insertion_point(field_get:protocol.PongMessage.echo)
  return echo_;
}
void PongMessage::set_echo(::google::protobuf::int32 value) {
  
  echo_ = value;
  // @@protoc_insertion_point(field_set:protocol.PongMessage.echo)
}

// int64 timestamp = 3;
void PongMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PongMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.PongMessage.timestamp)
  return timestamp_;
}
void PongMessage::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.PongMessage.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindNeighbours::kFromFieldNumber;
const int FindNeighbours::kTargetIdFieldNumber;
const int FindNeighbours::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindNeighbours::FindNeighbours()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_core_2fDiscover_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.FindNeighbours)
}
FindNeighbours::FindNeighbours(const FindNeighbours& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  targetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.targetid().size() > 0) {
    targetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetid_);
  }
  if (from.has_from()) {
    from_ = new ::protocol::Endpoint(*from.from_);
  } else {
    from_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:protocol.FindNeighbours)
}

void FindNeighbours::SharedCtor() {
  targetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&from_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

FindNeighbours::~FindNeighbours() {
  // @@protoc_insertion_point(destructor:protocol.FindNeighbours)
  SharedDtor();
}

void FindNeighbours::SharedDtor() {
  targetid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_;
}

void FindNeighbours::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindNeighbours::descriptor() {
  protobuf_core_2fDiscover_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_core_2fDiscover_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FindNeighbours& FindNeighbours::default_instance() {
  protobuf_core_2fDiscover_2eproto::InitDefaults();
  return *internal_default_instance();
}

FindNeighbours* FindNeighbours::New(::google::protobuf::Arena* arena) const {
  FindNeighbours* n = new FindNeighbours;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FindNeighbours::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.FindNeighbours)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && from_ != NULL) {
    delete from_;
  }
  from_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool FindNeighbours::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.FindNeighbours)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.Endpoint from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes targetId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_targetid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.FindNeighbours)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.FindNeighbours)
  return false;
#undef DO_
}

void FindNeighbours::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.FindNeighbours)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->from_, output);
  }

  // bytes targetId = 2;
  if (this->targetid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->targetid(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.FindNeighbours)
}

::google::protobuf::uint8* FindNeighbours::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.FindNeighbours)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->from_, deterministic, target);
  }

  // bytes targetId = 2;
  if (this->targetid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->targetid(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.FindNeighbours)
  return target;
}

size_t FindNeighbours::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.FindNeighbours)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes targetId = 2;
  if (this->targetid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->targetid());
  }

  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->from_);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindNeighbours::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.FindNeighbours)
  GOOGLE_DCHECK_NE(&from, this);
  const FindNeighbours* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FindNeighbours>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.FindNeighbours)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.FindNeighbours)
    MergeFrom(*source);
  }
}

void FindNeighbours::MergeFrom(const FindNeighbours& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.FindNeighbours)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.targetid().size() > 0) {

    targetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetid_);
  }
  if (from.has_from()) {
    mutable_from()->::protocol::Endpoint::MergeFrom(from.from());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void FindNeighbours::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.FindNeighbours)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindNeighbours::CopyFrom(const FindNeighbours& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.FindNeighbours)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindNeighbours::IsInitialized() const {
  return true;
}

void FindNeighbours::Swap(FindNeighbours* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindNeighbours::InternalSwap(FindNeighbours* other) {
  using std::swap;
  targetid_.Swap(&other->targetid_);
  swap(from_, other->from_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FindNeighbours::GetMetadata() const {
  protobuf_core_2fDiscover_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_core_2fDiscover_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FindNeighbours

// .protocol.Endpoint from = 1;
bool FindNeighbours::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
void FindNeighbours::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
  from_ = NULL;
}
const ::protocol::Endpoint& FindNeighbours::from() const {
  const ::protocol::Endpoint* p = from_;
  // @@protoc_insertion_point(field_get:protocol.FindNeighbours.from)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
::protocol::Endpoint* FindNeighbours::mutable_from() {
  
  if (from_ == NULL) {
    from_ = new ::protocol::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:protocol.FindNeighbours.from)
  return from_;
}
::protocol::Endpoint* FindNeighbours::release_from() {
  // @@protoc_insertion_point(field_release:protocol.FindNeighbours.from)
  
  ::protocol::Endpoint* temp = from_;
  from_ = NULL;
  return temp;
}
void FindNeighbours::set_allocated_from(::protocol::Endpoint* from) {
  delete from_;
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.FindNeighbours.from)
}

// bytes targetId = 2;
void FindNeighbours::clear_targetid() {
  targetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FindNeighbours::targetid() const {
  // @@protoc_insertion_point(field_get:protocol.FindNeighbours.targetId)
  return targetid_.GetNoArena();
}
void FindNeighbours::set_targetid(const ::std::string& value) {
  
  targetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.FindNeighbours.targetId)
}
#if LANG_CXX11
void FindNeighbours::set_targetid(::std::string&& value) {
  
  targetid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.FindNeighbours.targetId)
}
#endif
void FindNeighbours::set_targetid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  targetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.FindNeighbours.targetId)
}
void FindNeighbours::set_targetid(const void* value, size_t size) {
  
  targetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.FindNeighbours.targetId)
}
::std::string* FindNeighbours::mutable_targetid() {
  
  // @@protoc_insertion_point(field_mutable:protocol.FindNeighbours.targetId)
  return targetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindNeighbours::release_targetid() {
  // @@protoc_insertion_point(field_release:protocol.FindNeighbours.targetId)
  
  return targetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindNeighbours::set_allocated_targetid(::std::string* targetid) {
  if (targetid != NULL) {
    
  } else {
    
  }
  targetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetid);
  // @@protoc_insertion_point(field_set_allocated:protocol.FindNeighbours.targetId)
}

// int64 timestamp = 3;
void FindNeighbours::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 FindNeighbours::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.FindNeighbours.timestamp)
  return timestamp_;
}
void FindNeighbours::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.FindNeighbours.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Neighbours::kFromFieldNumber;
const int Neighbours::kNeighboursFieldNumber;
const int Neighbours::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Neighbours::Neighbours()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_core_2fDiscover_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Neighbours)
}
Neighbours::Neighbours(const Neighbours& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      neighbours_(from.neighbours_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_from()) {
    from_ = new ::protocol::Endpoint(*from.from_);
  } else {
    from_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:protocol.Neighbours)
}

void Neighbours::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&from_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

Neighbours::~Neighbours() {
  // @@protoc_insertion_point(destructor:protocol.Neighbours)
  SharedDtor();
}

void Neighbours::SharedDtor() {
  if (this != internal_default_instance()) delete from_;
}

void Neighbours::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Neighbours::descriptor() {
  protobuf_core_2fDiscover_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_core_2fDiscover_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Neighbours& Neighbours::default_instance() {
  protobuf_core_2fDiscover_2eproto::InitDefaults();
  return *internal_default_instance();
}

Neighbours* Neighbours::New(::google::protobuf::Arena* arena) const {
  Neighbours* n = new Neighbours;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Neighbours::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Neighbours)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neighbours_.Clear();
  if (GetArenaNoVirtual() == NULL && from_ != NULL) {
    delete from_;
  }
  from_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Neighbours::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Neighbours)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.Endpoint from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Endpoint neighbours = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_neighbours()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Neighbours)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Neighbours)
  return false;
#undef DO_
}

void Neighbours::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Neighbours)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->from_, output);
  }

  // repeated .protocol.Endpoint neighbours = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neighbours_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->neighbours(static_cast<int>(i)), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Neighbours)
}

::google::protobuf::uint8* Neighbours::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Neighbours)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->from_, deterministic, target);
  }

  // repeated .protocol.Endpoint neighbours = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neighbours_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->neighbours(static_cast<int>(i)), deterministic, target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Neighbours)
  return target;
}

size_t Neighbours::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Neighbours)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .protocol.Endpoint neighbours = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->neighbours_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->neighbours(static_cast<int>(i)));
    }
  }

  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->from_);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Neighbours::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Neighbours)
  GOOGLE_DCHECK_NE(&from, this);
  const Neighbours* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Neighbours>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Neighbours)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Neighbours)
    MergeFrom(*source);
  }
}

void Neighbours::MergeFrom(const Neighbours& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Neighbours)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neighbours_.MergeFrom(from.neighbours_);
  if (from.has_from()) {
    mutable_from()->::protocol::Endpoint::MergeFrom(from.from());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Neighbours::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Neighbours)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Neighbours::CopyFrom(const Neighbours& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Neighbours)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neighbours::IsInitialized() const {
  return true;
}

void Neighbours::Swap(Neighbours* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Neighbours::InternalSwap(Neighbours* other) {
  using std::swap;
  neighbours_.InternalSwap(&other->neighbours_);
  swap(from_, other->from_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Neighbours::GetMetadata() const {
  protobuf_core_2fDiscover_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_core_2fDiscover_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Neighbours

// .protocol.Endpoint from = 1;
bool Neighbours::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
void Neighbours::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
  from_ = NULL;
}
const ::protocol::Endpoint& Neighbours::from() const {
  const ::protocol::Endpoint* p = from_;
  // @@protoc_insertion_point(field_get:protocol.Neighbours.from)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
::protocol::Endpoint* Neighbours::mutable_from() {
  
  if (from_ == NULL) {
    from_ = new ::protocol::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Neighbours.from)
  return from_;
}
::protocol::Endpoint* Neighbours::release_from() {
  // @@protoc_insertion_point(field_release:protocol.Neighbours.from)
  
  ::protocol::Endpoint* temp = from_;
  from_ = NULL;
  return temp;
}
void Neighbours::set_allocated_from(::protocol::Endpoint* from) {
  delete from_;
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Neighbours.from)
}

// repeated .protocol.Endpoint neighbours = 2;
int Neighbours::neighbours_size() const {
  return neighbours_.size();
}
void Neighbours::clear_neighbours() {
  neighbours_.Clear();
}
const ::protocol::Endpoint& Neighbours::neighbours(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Neighbours.neighbours)
  return neighbours_.Get(index);
}
::protocol::Endpoint* Neighbours::mutable_neighbours(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Neighbours.neighbours)
  return neighbours_.Mutable(index);
}
::protocol::Endpoint* Neighbours::add_neighbours() {
  // @@protoc_insertion_point(field_add:protocol.Neighbours.neighbours)
  return neighbours_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Endpoint >*
Neighbours::mutable_neighbours() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Neighbours.neighbours)
  return &neighbours_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Endpoint >&
Neighbours::neighbours() const {
  // @@protoc_insertion_point(field_list:protocol.Neighbours.neighbours)
  return neighbours_;
}

// int64 timestamp = 3;
void Neighbours::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Neighbours::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.Neighbours.timestamp)
  return timestamp_;
}
void Neighbours::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.Neighbours.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
