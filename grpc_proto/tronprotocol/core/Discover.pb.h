// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/Discover.proto

#ifndef PROTOBUF_core_2fDiscover_2eproto__INCLUDED
#define PROTOBUF_core_2fDiscover_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace protocol {
class Endpoint;
class EndpointDefaultTypeInternal;
extern EndpointDefaultTypeInternal _Endpoint_default_instance_;
class FindNeighbours;
class FindNeighboursDefaultTypeInternal;
extern FindNeighboursDefaultTypeInternal _FindNeighbours_default_instance_;
class Neighbours;
class NeighboursDefaultTypeInternal;
extern NeighboursDefaultTypeInternal _Neighbours_default_instance_;
class PingMessage;
class PingMessageDefaultTypeInternal;
extern PingMessageDefaultTypeInternal _PingMessage_default_instance_;
class PongMessage;
class PongMessageDefaultTypeInternal;
extern PongMessageDefaultTypeInternal _PongMessage_default_instance_;
}  // namespace protocol

namespace protocol {

namespace protobuf_core_2fDiscover_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_core_2fDiscover_2eproto

// ===================================================================

class Endpoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Endpoint) */ {
 public:
  Endpoint();
  virtual ~Endpoint();

  Endpoint(const Endpoint& from);

  inline Endpoint& operator=(const Endpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Endpoint(Endpoint&& from) noexcept
    : Endpoint() {
    *this = ::std::move(from);
  }

  inline Endpoint& operator=(Endpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Endpoint& default_instance();

  static inline const Endpoint* internal_default_instance() {
    return reinterpret_cast<const Endpoint*>(
               &_Endpoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Endpoint* other);
  friend void swap(Endpoint& a, Endpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Endpoint* New() const PROTOBUF_FINAL { return New(NULL); }

  Endpoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Endpoint& from);
  void MergeFrom(const Endpoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Endpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // bytes nodeId = 3;
  void clear_nodeid();
  static const int kNodeIdFieldNumber = 3;
  const ::std::string& nodeid() const;
  void set_nodeid(const ::std::string& value);
  #if LANG_CXX11
  void set_nodeid(::std::string&& value);
  #endif
  void set_nodeid(const char* value);
  void set_nodeid(const void* value, size_t size);
  ::std::string* mutable_nodeid();
  ::std::string* release_nodeid();
  void set_allocated_nodeid(::std::string* nodeid);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.Endpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr nodeid_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fDiscover_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PingMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.PingMessage) */ {
 public:
  PingMessage();
  virtual ~PingMessage();

  PingMessage(const PingMessage& from);

  inline PingMessage& operator=(const PingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingMessage(PingMessage&& from) noexcept
    : PingMessage() {
    *this = ::std::move(from);
  }

  inline PingMessage& operator=(PingMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingMessage& default_instance();

  static inline const PingMessage* internal_default_instance() {
    return reinterpret_cast<const PingMessage*>(
               &_PingMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PingMessage* other);
  friend void swap(PingMessage& a, PingMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  PingMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PingMessage& from);
  void MergeFrom(const PingMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PingMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .protocol.Endpoint from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::protocol::Endpoint& from() const;
  ::protocol::Endpoint* mutable_from();
  ::protocol::Endpoint* release_from();
  void set_allocated_from(::protocol::Endpoint* from);

  // .protocol.Endpoint to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::protocol::Endpoint& to() const;
  ::protocol::Endpoint* mutable_to();
  ::protocol::Endpoint* release_to();
  void set_allocated_to(::protocol::Endpoint* to);

  // int64 timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int32 version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.PingMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::protocol::Endpoint* from_;
  ::protocol::Endpoint* to_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 version_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fDiscover_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PongMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.PongMessage) */ {
 public:
  PongMessage();
  virtual ~PongMessage();

  PongMessage(const PongMessage& from);

  inline PongMessage& operator=(const PongMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PongMessage(PongMessage&& from) noexcept
    : PongMessage() {
    *this = ::std::move(from);
  }

  inline PongMessage& operator=(PongMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PongMessage& default_instance();

  static inline const PongMessage* internal_default_instance() {
    return reinterpret_cast<const PongMessage*>(
               &_PongMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PongMessage* other);
  friend void swap(PongMessage& a, PongMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PongMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  PongMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PongMessage& from);
  void MergeFrom(const PongMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PongMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .protocol.Endpoint from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::protocol::Endpoint& from() const;
  ::protocol::Endpoint* mutable_from();
  ::protocol::Endpoint* release_from();
  void set_allocated_from(::protocol::Endpoint* from);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int32 echo = 2;
  void clear_echo();
  static const int kEchoFieldNumber = 2;
  ::google::protobuf::int32 echo() const;
  void set_echo(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.PongMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::protocol::Endpoint* from_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 echo_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fDiscover_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FindNeighbours : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.FindNeighbours) */ {
 public:
  FindNeighbours();
  virtual ~FindNeighbours();

  FindNeighbours(const FindNeighbours& from);

  inline FindNeighbours& operator=(const FindNeighbours& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FindNeighbours(FindNeighbours&& from) noexcept
    : FindNeighbours() {
    *this = ::std::move(from);
  }

  inline FindNeighbours& operator=(FindNeighbours&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FindNeighbours& default_instance();

  static inline const FindNeighbours* internal_default_instance() {
    return reinterpret_cast<const FindNeighbours*>(
               &_FindNeighbours_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FindNeighbours* other);
  friend void swap(FindNeighbours& a, FindNeighbours& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FindNeighbours* New() const PROTOBUF_FINAL { return New(NULL); }

  FindNeighbours* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FindNeighbours& from);
  void MergeFrom(const FindNeighbours& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FindNeighbours* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes targetId = 2;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 2;
  const ::std::string& targetid() const;
  void set_targetid(const ::std::string& value);
  #if LANG_CXX11
  void set_targetid(::std::string&& value);
  #endif
  void set_targetid(const char* value);
  void set_targetid(const void* value, size_t size);
  ::std::string* mutable_targetid();
  ::std::string* release_targetid();
  void set_allocated_targetid(::std::string* targetid);

  // .protocol.Endpoint from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::protocol::Endpoint& from() const;
  ::protocol::Endpoint* mutable_from();
  ::protocol::Endpoint* release_from();
  void set_allocated_from(::protocol::Endpoint* from);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.FindNeighbours)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr targetid_;
  ::protocol::Endpoint* from_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fDiscover_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Neighbours : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Neighbours) */ {
 public:
  Neighbours();
  virtual ~Neighbours();

  Neighbours(const Neighbours& from);

  inline Neighbours& operator=(const Neighbours& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Neighbours(Neighbours&& from) noexcept
    : Neighbours() {
    *this = ::std::move(from);
  }

  inline Neighbours& operator=(Neighbours&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Neighbours& default_instance();

  static inline const Neighbours* internal_default_instance() {
    return reinterpret_cast<const Neighbours*>(
               &_Neighbours_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Neighbours* other);
  friend void swap(Neighbours& a, Neighbours& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Neighbours* New() const PROTOBUF_FINAL { return New(NULL); }

  Neighbours* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Neighbours& from);
  void MergeFrom(const Neighbours& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Neighbours* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.Endpoint neighbours = 2;
  int neighbours_size() const;
  void clear_neighbours();
  static const int kNeighboursFieldNumber = 2;
  const ::protocol::Endpoint& neighbours(int index) const;
  ::protocol::Endpoint* mutable_neighbours(int index);
  ::protocol::Endpoint* add_neighbours();
  ::google::protobuf::RepeatedPtrField< ::protocol::Endpoint >*
      mutable_neighbours();
  const ::google::protobuf::RepeatedPtrField< ::protocol::Endpoint >&
      neighbours() const;

  // .protocol.Endpoint from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::protocol::Endpoint& from() const;
  ::protocol::Endpoint* mutable_from();
  ::protocol::Endpoint* release_from();
  void set_allocated_from(::protocol::Endpoint* from);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Neighbours)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::Endpoint > neighbours_;
  ::protocol::Endpoint* from_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fDiscover_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Endpoint

// bytes address = 1;
inline void Endpoint::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Endpoint::address() const {
  // @@protoc_insertion_point(field_get:protocol.Endpoint.address)
  return address_.GetNoArena();
}
inline void Endpoint::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Endpoint.address)
}
#if LANG_CXX11
inline void Endpoint::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Endpoint.address)
}
#endif
inline void Endpoint::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Endpoint.address)
}
inline void Endpoint::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Endpoint.address)
}
inline ::std::string* Endpoint::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Endpoint.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Endpoint::release_address() {
  // @@protoc_insertion_point(field_release:protocol.Endpoint.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Endpoint::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Endpoint.address)
}

// int32 port = 2;
inline void Endpoint::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 Endpoint::port() const {
  // @@protoc_insertion_point(field_get:protocol.Endpoint.port)
  return port_;
}
inline void Endpoint::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:protocol.Endpoint.port)
}

// bytes nodeId = 3;
inline void Endpoint::clear_nodeid() {
  nodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Endpoint::nodeid() const {
  // @@protoc_insertion_point(field_get:protocol.Endpoint.nodeId)
  return nodeid_.GetNoArena();
}
inline void Endpoint::set_nodeid(const ::std::string& value) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Endpoint.nodeId)
}
#if LANG_CXX11
inline void Endpoint::set_nodeid(::std::string&& value) {
  
  nodeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Endpoint.nodeId)
}
#endif
inline void Endpoint::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Endpoint.nodeId)
}
inline void Endpoint::set_nodeid(const void* value, size_t size) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Endpoint.nodeId)
}
inline ::std::string* Endpoint::mutable_nodeid() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Endpoint.nodeId)
  return nodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Endpoint::release_nodeid() {
  // @@protoc_insertion_point(field_release:protocol.Endpoint.nodeId)
  
  return nodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Endpoint::set_allocated_nodeid(::std::string* nodeid) {
  if (nodeid != NULL) {
    
  } else {
    
  }
  nodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodeid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Endpoint.nodeId)
}

// -------------------------------------------------------------------

// PingMessage

// .protocol.Endpoint from = 1;
inline bool PingMessage::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline void PingMessage::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
  from_ = NULL;
}
inline const ::protocol::Endpoint& PingMessage::from() const {
  const ::protocol::Endpoint* p = from_;
  // @@protoc_insertion_point(field_get:protocol.PingMessage.from)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
inline ::protocol::Endpoint* PingMessage::mutable_from() {
  
  if (from_ == NULL) {
    from_ = new ::protocol::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PingMessage.from)
  return from_;
}
inline ::protocol::Endpoint* PingMessage::release_from() {
  // @@protoc_insertion_point(field_release:protocol.PingMessage.from)
  
  ::protocol::Endpoint* temp = from_;
  from_ = NULL;
  return temp;
}
inline void PingMessage::set_allocated_from(::protocol::Endpoint* from) {
  delete from_;
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PingMessage.from)
}

// .protocol.Endpoint to = 2;
inline bool PingMessage::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
inline void PingMessage::clear_to() {
  if (GetArenaNoVirtual() == NULL && to_ != NULL) delete to_;
  to_ = NULL;
}
inline const ::protocol::Endpoint& PingMessage::to() const {
  const ::protocol::Endpoint* p = to_;
  // @@protoc_insertion_point(field_get:protocol.PingMessage.to)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
inline ::protocol::Endpoint* PingMessage::mutable_to() {
  
  if (to_ == NULL) {
    to_ = new ::protocol::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PingMessage.to)
  return to_;
}
inline ::protocol::Endpoint* PingMessage::release_to() {
  // @@protoc_insertion_point(field_release:protocol.PingMessage.to)
  
  ::protocol::Endpoint* temp = to_;
  to_ = NULL;
  return temp;
}
inline void PingMessage::set_allocated_to(::protocol::Endpoint* to) {
  delete to_;
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PingMessage.to)
}

// int32 version = 3;
inline void PingMessage::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 PingMessage::version() const {
  // @@protoc_insertion_point(field_get:protocol.PingMessage.version)
  return version_;
}
inline void PingMessage::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.PingMessage.version)
}

// int64 timestamp = 4;
inline void PingMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PingMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.PingMessage.timestamp)
  return timestamp_;
}
inline void PingMessage::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.PingMessage.timestamp)
}

// -------------------------------------------------------------------

// PongMessage

// .protocol.Endpoint from = 1;
inline bool PongMessage::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline void PongMessage::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
  from_ = NULL;
}
inline const ::protocol::Endpoint& PongMessage::from() const {
  const ::protocol::Endpoint* p = from_;
  // @@protoc_insertion_point(field_get:protocol.PongMessage.from)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
inline ::protocol::Endpoint* PongMessage::mutable_from() {
  
  if (from_ == NULL) {
    from_ = new ::protocol::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PongMessage.from)
  return from_;
}
inline ::protocol::Endpoint* PongMessage::release_from() {
  // @@protoc_insertion_point(field_release:protocol.PongMessage.from)
  
  ::protocol::Endpoint* temp = from_;
  from_ = NULL;
  return temp;
}
inline void PongMessage::set_allocated_from(::protocol::Endpoint* from) {
  delete from_;
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PongMessage.from)
}

// int32 echo = 2;
inline void PongMessage::clear_echo() {
  echo_ = 0;
}
inline ::google::protobuf::int32 PongMessage::echo() const {
  // @@protoc_insertion_point(field_get:protocol.PongMessage.echo)
  return echo_;
}
inline void PongMessage::set_echo(::google::protobuf::int32 value) {
  
  echo_ = value;
  // @@protoc_insertion_point(field_set:protocol.PongMessage.echo)
}

// int64 timestamp = 3;
inline void PongMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PongMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.PongMessage.timestamp)
  return timestamp_;
}
inline void PongMessage::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.PongMessage.timestamp)
}

// -------------------------------------------------------------------

// FindNeighbours

// .protocol.Endpoint from = 1;
inline bool FindNeighbours::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline void FindNeighbours::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
  from_ = NULL;
}
inline const ::protocol::Endpoint& FindNeighbours::from() const {
  const ::protocol::Endpoint* p = from_;
  // @@protoc_insertion_point(field_get:protocol.FindNeighbours.from)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
inline ::protocol::Endpoint* FindNeighbours::mutable_from() {
  
  if (from_ == NULL) {
    from_ = new ::protocol::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:protocol.FindNeighbours.from)
  return from_;
}
inline ::protocol::Endpoint* FindNeighbours::release_from() {
  // @@protoc_insertion_point(field_release:protocol.FindNeighbours.from)
  
  ::protocol::Endpoint* temp = from_;
  from_ = NULL;
  return temp;
}
inline void FindNeighbours::set_allocated_from(::protocol::Endpoint* from) {
  delete from_;
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.FindNeighbours.from)
}

// bytes targetId = 2;
inline void FindNeighbours::clear_targetid() {
  targetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FindNeighbours::targetid() const {
  // @@protoc_insertion_point(field_get:protocol.FindNeighbours.targetId)
  return targetid_.GetNoArena();
}
inline void FindNeighbours::set_targetid(const ::std::string& value) {
  
  targetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.FindNeighbours.targetId)
}
#if LANG_CXX11
inline void FindNeighbours::set_targetid(::std::string&& value) {
  
  targetid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.FindNeighbours.targetId)
}
#endif
inline void FindNeighbours::set_targetid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  targetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.FindNeighbours.targetId)
}
inline void FindNeighbours::set_targetid(const void* value, size_t size) {
  
  targetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.FindNeighbours.targetId)
}
inline ::std::string* FindNeighbours::mutable_targetid() {
  
  // @@protoc_insertion_point(field_mutable:protocol.FindNeighbours.targetId)
  return targetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FindNeighbours::release_targetid() {
  // @@protoc_insertion_point(field_release:protocol.FindNeighbours.targetId)
  
  return targetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FindNeighbours::set_allocated_targetid(::std::string* targetid) {
  if (targetid != NULL) {
    
  } else {
    
  }
  targetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetid);
  // @@protoc_insertion_point(field_set_allocated:protocol.FindNeighbours.targetId)
}

// int64 timestamp = 3;
inline void FindNeighbours::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FindNeighbours::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.FindNeighbours.timestamp)
  return timestamp_;
}
inline void FindNeighbours::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.FindNeighbours.timestamp)
}

// -------------------------------------------------------------------

// Neighbours

// .protocol.Endpoint from = 1;
inline bool Neighbours::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline void Neighbours::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
  from_ = NULL;
}
inline const ::protocol::Endpoint& Neighbours::from() const {
  const ::protocol::Endpoint* p = from_;
  // @@protoc_insertion_point(field_get:protocol.Neighbours.from)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
inline ::protocol::Endpoint* Neighbours::mutable_from() {
  
  if (from_ == NULL) {
    from_ = new ::protocol::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Neighbours.from)
  return from_;
}
inline ::protocol::Endpoint* Neighbours::release_from() {
  // @@protoc_insertion_point(field_release:protocol.Neighbours.from)
  
  ::protocol::Endpoint* temp = from_;
  from_ = NULL;
  return temp;
}
inline void Neighbours::set_allocated_from(::protocol::Endpoint* from) {
  delete from_;
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Neighbours.from)
}

// repeated .protocol.Endpoint neighbours = 2;
inline int Neighbours::neighbours_size() const {
  return neighbours_.size();
}
inline void Neighbours::clear_neighbours() {
  neighbours_.Clear();
}
inline const ::protocol::Endpoint& Neighbours::neighbours(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Neighbours.neighbours)
  return neighbours_.Get(index);
}
inline ::protocol::Endpoint* Neighbours::mutable_neighbours(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Neighbours.neighbours)
  return neighbours_.Mutable(index);
}
inline ::protocol::Endpoint* Neighbours::add_neighbours() {
  // @@protoc_insertion_point(field_add:protocol.Neighbours.neighbours)
  return neighbours_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::Endpoint >*
Neighbours::mutable_neighbours() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Neighbours.neighbours)
  return &neighbours_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::Endpoint >&
Neighbours::neighbours() const {
  // @@protoc_insertion_point(field_list:protocol.Neighbours.neighbours)
  return neighbours_;
}

// int64 timestamp = 3;
inline void Neighbours::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Neighbours::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.Neighbours.timestamp)
  return timestamp_;
}
inline void Neighbours::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.Neighbours.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_core_2fDiscover_2eproto__INCLUDED
