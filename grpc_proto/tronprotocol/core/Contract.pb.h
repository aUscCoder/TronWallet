// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/Contract.proto

#ifndef PROTOBUF_core_2fContract_2eproto__INCLUDED
#define PROTOBUF_core_2fContract_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "core/Tron.pb.h"
// @@protoc_insertion_point(includes)
namespace protocol {
class AccountCreateContract;
class AccountCreateContractDefaultTypeInternal;
extern AccountCreateContractDefaultTypeInternal _AccountCreateContract_default_instance_;
class AccountUpdateContract;
class AccountUpdateContractDefaultTypeInternal;
extern AccountUpdateContractDefaultTypeInternal _AccountUpdateContract_default_instance_;
class AssetIssueContract;
class AssetIssueContractDefaultTypeInternal;
extern AssetIssueContractDefaultTypeInternal _AssetIssueContract_default_instance_;
class AssetIssueContract_FrozenSupply;
class AssetIssueContract_FrozenSupplyDefaultTypeInternal;
extern AssetIssueContract_FrozenSupplyDefaultTypeInternal _AssetIssueContract_FrozenSupply_default_instance_;
class DeployContract;
class DeployContractDefaultTypeInternal;
extern DeployContractDefaultTypeInternal _DeployContract_default_instance_;
class FreezeBalanceContract;
class FreezeBalanceContractDefaultTypeInternal;
extern FreezeBalanceContractDefaultTypeInternal _FreezeBalanceContract_default_instance_;
class ParticipateAssetIssueContract;
class ParticipateAssetIssueContractDefaultTypeInternal;
extern ParticipateAssetIssueContractDefaultTypeInternal _ParticipateAssetIssueContract_default_instance_;
class TransferAssetContract;
class TransferAssetContractDefaultTypeInternal;
extern TransferAssetContractDefaultTypeInternal _TransferAssetContract_default_instance_;
class TransferContract;
class TransferContractDefaultTypeInternal;
extern TransferContractDefaultTypeInternal _TransferContract_default_instance_;
class UnfreezeAssetContract;
class UnfreezeAssetContractDefaultTypeInternal;
extern UnfreezeAssetContractDefaultTypeInternal _UnfreezeAssetContract_default_instance_;
class UnfreezeBalanceContract;
class UnfreezeBalanceContractDefaultTypeInternal;
extern UnfreezeBalanceContractDefaultTypeInternal _UnfreezeBalanceContract_default_instance_;
class UpdateAssetContract;
class UpdateAssetContractDefaultTypeInternal;
extern UpdateAssetContractDefaultTypeInternal _UpdateAssetContract_default_instance_;
class VoteAssetContract;
class VoteAssetContractDefaultTypeInternal;
extern VoteAssetContractDefaultTypeInternal _VoteAssetContract_default_instance_;
class VoteWitnessContract;
class VoteWitnessContractDefaultTypeInternal;
extern VoteWitnessContractDefaultTypeInternal _VoteWitnessContract_default_instance_;
class VoteWitnessContract_Vote;
class VoteWitnessContract_VoteDefaultTypeInternal;
extern VoteWitnessContract_VoteDefaultTypeInternal _VoteWitnessContract_Vote_default_instance_;
class WithdrawBalanceContract;
class WithdrawBalanceContractDefaultTypeInternal;
extern WithdrawBalanceContractDefaultTypeInternal _WithdrawBalanceContract_default_instance_;
class WitnessCreateContract;
class WitnessCreateContractDefaultTypeInternal;
extern WitnessCreateContractDefaultTypeInternal _WitnessCreateContract_default_instance_;
class WitnessUpdateContract;
class WitnessUpdateContractDefaultTypeInternal;
extern WitnessUpdateContractDefaultTypeInternal _WitnessUpdateContract_default_instance_;
}  // namespace protocol

namespace protocol {

namespace protobuf_core_2fContract_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_core_2fContract_2eproto

// ===================================================================

class AccountCreateContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.AccountCreateContract) */ {
 public:
  AccountCreateContract();
  virtual ~AccountCreateContract();

  AccountCreateContract(const AccountCreateContract& from);

  inline AccountCreateContract& operator=(const AccountCreateContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountCreateContract(AccountCreateContract&& from) noexcept
    : AccountCreateContract() {
    *this = ::std::move(from);
  }

  inline AccountCreateContract& operator=(AccountCreateContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountCreateContract& default_instance();

  static inline const AccountCreateContract* internal_default_instance() {
    return reinterpret_cast<const AccountCreateContract*>(
               &_AccountCreateContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AccountCreateContract* other);
  friend void swap(AccountCreateContract& a, AccountCreateContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountCreateContract* New() const PROTOBUF_FINAL { return New(NULL); }

  AccountCreateContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccountCreateContract& from);
  void MergeFrom(const AccountCreateContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccountCreateContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes account_name = 2;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 2;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const void* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // bytes owner_address = 3;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 3;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // .protocol.AccountType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::protocol::AccountType type() const;
  void set_type(::protocol::AccountType value);

  // @@protoc_insertion_point(class_scope:protocol.AccountCreateContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountUpdateContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.AccountUpdateContract) */ {
 public:
  AccountUpdateContract();
  virtual ~AccountUpdateContract();

  AccountUpdateContract(const AccountUpdateContract& from);

  inline AccountUpdateContract& operator=(const AccountUpdateContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountUpdateContract(AccountUpdateContract&& from) noexcept
    : AccountUpdateContract() {
    *this = ::std::move(from);
  }

  inline AccountUpdateContract& operator=(AccountUpdateContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountUpdateContract& default_instance();

  static inline const AccountUpdateContract* internal_default_instance() {
    return reinterpret_cast<const AccountUpdateContract*>(
               &_AccountUpdateContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AccountUpdateContract* other);
  friend void swap(AccountUpdateContract& a, AccountUpdateContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountUpdateContract* New() const PROTOBUF_FINAL { return New(NULL); }

  AccountUpdateContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccountUpdateContract& from);
  void MergeFrom(const AccountUpdateContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccountUpdateContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes account_name = 1;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 1;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const void* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // bytes owner_address = 2;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 2;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // @@protoc_insertion_point(class_scope:protocol.AccountUpdateContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.TransferContract) */ {
 public:
  TransferContract();
  virtual ~TransferContract();

  TransferContract(const TransferContract& from);

  inline TransferContract& operator=(const TransferContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferContract(TransferContract&& from) noexcept
    : TransferContract() {
    *this = ::std::move(from);
  }

  inline TransferContract& operator=(TransferContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferContract& default_instance();

  static inline const TransferContract* internal_default_instance() {
    return reinterpret_cast<const TransferContract*>(
               &_TransferContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TransferContract* other);
  friend void swap(TransferContract& a, TransferContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferContract* New() const PROTOBUF_FINAL { return New(NULL); }

  TransferContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransferContract& from);
  void MergeFrom(const TransferContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransferContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes owner_address = 1;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 1;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // bytes to_address = 2;
  void clear_to_address();
  static const int kToAddressFieldNumber = 2;
  const ::std::string& to_address() const;
  void set_to_address(const ::std::string& value);
  #if LANG_CXX11
  void set_to_address(::std::string&& value);
  #endif
  void set_to_address(const char* value);
  void set_to_address(const void* value, size_t size);
  ::std::string* mutable_to_address();
  ::std::string* release_to_address();
  void set_allocated_to_address(::std::string* to_address);

  // int64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.TransferContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  ::google::protobuf::internal::ArenaStringPtr to_address_;
  ::google::protobuf::int64 amount_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferAssetContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.TransferAssetContract) */ {
 public:
  TransferAssetContract();
  virtual ~TransferAssetContract();

  TransferAssetContract(const TransferAssetContract& from);

  inline TransferAssetContract& operator=(const TransferAssetContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferAssetContract(TransferAssetContract&& from) noexcept
    : TransferAssetContract() {
    *this = ::std::move(from);
  }

  inline TransferAssetContract& operator=(TransferAssetContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferAssetContract& default_instance();

  static inline const TransferAssetContract* internal_default_instance() {
    return reinterpret_cast<const TransferAssetContract*>(
               &_TransferAssetContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TransferAssetContract* other);
  friend void swap(TransferAssetContract& a, TransferAssetContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferAssetContract* New() const PROTOBUF_FINAL { return New(NULL); }

  TransferAssetContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransferAssetContract& from);
  void MergeFrom(const TransferAssetContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransferAssetContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes asset_name = 1;
  void clear_asset_name();
  static const int kAssetNameFieldNumber = 1;
  const ::std::string& asset_name() const;
  void set_asset_name(const ::std::string& value);
  #if LANG_CXX11
  void set_asset_name(::std::string&& value);
  #endif
  void set_asset_name(const char* value);
  void set_asset_name(const void* value, size_t size);
  ::std::string* mutable_asset_name();
  ::std::string* release_asset_name();
  void set_allocated_asset_name(::std::string* asset_name);

  // bytes owner_address = 2;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 2;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // bytes to_address = 3;
  void clear_to_address();
  static const int kToAddressFieldNumber = 3;
  const ::std::string& to_address() const;
  void set_to_address(const ::std::string& value);
  #if LANG_CXX11
  void set_to_address(::std::string&& value);
  #endif
  void set_to_address(const char* value);
  void set_to_address(const void* value, size_t size);
  ::std::string* mutable_to_address();
  ::std::string* release_to_address();
  void set_allocated_to_address(::std::string* to_address);

  // int64 amount = 4;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.TransferAssetContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr asset_name_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  ::google::protobuf::internal::ArenaStringPtr to_address_;
  ::google::protobuf::int64 amount_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoteAssetContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.VoteAssetContract) */ {
 public:
  VoteAssetContract();
  virtual ~VoteAssetContract();

  VoteAssetContract(const VoteAssetContract& from);

  inline VoteAssetContract& operator=(const VoteAssetContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoteAssetContract(VoteAssetContract&& from) noexcept
    : VoteAssetContract() {
    *this = ::std::move(from);
  }

  inline VoteAssetContract& operator=(VoteAssetContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteAssetContract& default_instance();

  static inline const VoteAssetContract* internal_default_instance() {
    return reinterpret_cast<const VoteAssetContract*>(
               &_VoteAssetContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(VoteAssetContract* other);
  friend void swap(VoteAssetContract& a, VoteAssetContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoteAssetContract* New() const PROTOBUF_FINAL { return New(NULL); }

  VoteAssetContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoteAssetContract& from);
  void MergeFrom(const VoteAssetContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoteAssetContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes vote_address = 2;
  int vote_address_size() const;
  void clear_vote_address();
  static const int kVoteAddressFieldNumber = 2;
  const ::std::string& vote_address(int index) const;
  ::std::string* mutable_vote_address(int index);
  void set_vote_address(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_vote_address(int index, ::std::string&& value);
  #endif
  void set_vote_address(int index, const char* value);
  void set_vote_address(int index, const void* value, size_t size);
  ::std::string* add_vote_address();
  void add_vote_address(const ::std::string& value);
  #if LANG_CXX11
  void add_vote_address(::std::string&& value);
  #endif
  void add_vote_address(const char* value);
  void add_vote_address(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& vote_address() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_vote_address();

  // bytes owner_address = 1;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 1;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // bool support = 3;
  void clear_support();
  static const int kSupportFieldNumber = 3;
  bool support() const;
  void set_support(bool value);

  // int32 count = 5;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.VoteAssetContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> vote_address_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  bool support_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoteWitnessContract_Vote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.VoteWitnessContract.Vote) */ {
 public:
  VoteWitnessContract_Vote();
  virtual ~VoteWitnessContract_Vote();

  VoteWitnessContract_Vote(const VoteWitnessContract_Vote& from);

  inline VoteWitnessContract_Vote& operator=(const VoteWitnessContract_Vote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoteWitnessContract_Vote(VoteWitnessContract_Vote&& from) noexcept
    : VoteWitnessContract_Vote() {
    *this = ::std::move(from);
  }

  inline VoteWitnessContract_Vote& operator=(VoteWitnessContract_Vote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteWitnessContract_Vote& default_instance();

  static inline const VoteWitnessContract_Vote* internal_default_instance() {
    return reinterpret_cast<const VoteWitnessContract_Vote*>(
               &_VoteWitnessContract_Vote_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(VoteWitnessContract_Vote* other);
  friend void swap(VoteWitnessContract_Vote& a, VoteWitnessContract_Vote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoteWitnessContract_Vote* New() const PROTOBUF_FINAL { return New(NULL); }

  VoteWitnessContract_Vote* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoteWitnessContract_Vote& from);
  void MergeFrom(const VoteWitnessContract_Vote& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoteWitnessContract_Vote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes vote_address = 1;
  void clear_vote_address();
  static const int kVoteAddressFieldNumber = 1;
  const ::std::string& vote_address() const;
  void set_vote_address(const ::std::string& value);
  #if LANG_CXX11
  void set_vote_address(::std::string&& value);
  #endif
  void set_vote_address(const char* value);
  void set_vote_address(const void* value, size_t size);
  ::std::string* mutable_vote_address();
  ::std::string* release_vote_address();
  void set_allocated_vote_address(::std::string* vote_address);

  // int64 vote_count = 2;
  void clear_vote_count();
  static const int kVoteCountFieldNumber = 2;
  ::google::protobuf::int64 vote_count() const;
  void set_vote_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.VoteWitnessContract.Vote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vote_address_;
  ::google::protobuf::int64 vote_count_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoteWitnessContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.VoteWitnessContract) */ {
 public:
  VoteWitnessContract();
  virtual ~VoteWitnessContract();

  VoteWitnessContract(const VoteWitnessContract& from);

  inline VoteWitnessContract& operator=(const VoteWitnessContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoteWitnessContract(VoteWitnessContract&& from) noexcept
    : VoteWitnessContract() {
    *this = ::std::move(from);
  }

  inline VoteWitnessContract& operator=(VoteWitnessContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteWitnessContract& default_instance();

  static inline const VoteWitnessContract* internal_default_instance() {
    return reinterpret_cast<const VoteWitnessContract*>(
               &_VoteWitnessContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(VoteWitnessContract* other);
  friend void swap(VoteWitnessContract& a, VoteWitnessContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoteWitnessContract* New() const PROTOBUF_FINAL { return New(NULL); }

  VoteWitnessContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoteWitnessContract& from);
  void MergeFrom(const VoteWitnessContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoteWitnessContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VoteWitnessContract_Vote Vote;

  // accessors -------------------------------------------------------

  // repeated .protocol.VoteWitnessContract.Vote votes = 2;
  int votes_size() const;
  void clear_votes();
  static const int kVotesFieldNumber = 2;
  const ::protocol::VoteWitnessContract_Vote& votes(int index) const;
  ::protocol::VoteWitnessContract_Vote* mutable_votes(int index);
  ::protocol::VoteWitnessContract_Vote* add_votes();
  ::google::protobuf::RepeatedPtrField< ::protocol::VoteWitnessContract_Vote >*
      mutable_votes();
  const ::google::protobuf::RepeatedPtrField< ::protocol::VoteWitnessContract_Vote >&
      votes() const;

  // bytes owner_address = 1;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 1;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // bool support = 3;
  void clear_support();
  static const int kSupportFieldNumber = 3;
  bool support() const;
  void set_support(bool value);

  // @@protoc_insertion_point(class_scope:protocol.VoteWitnessContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::VoteWitnessContract_Vote > votes_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  bool support_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WitnessCreateContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.WitnessCreateContract) */ {
 public:
  WitnessCreateContract();
  virtual ~WitnessCreateContract();

  WitnessCreateContract(const WitnessCreateContract& from);

  inline WitnessCreateContract& operator=(const WitnessCreateContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WitnessCreateContract(WitnessCreateContract&& from) noexcept
    : WitnessCreateContract() {
    *this = ::std::move(from);
  }

  inline WitnessCreateContract& operator=(WitnessCreateContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WitnessCreateContract& default_instance();

  static inline const WitnessCreateContract* internal_default_instance() {
    return reinterpret_cast<const WitnessCreateContract*>(
               &_WitnessCreateContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(WitnessCreateContract* other);
  friend void swap(WitnessCreateContract& a, WitnessCreateContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WitnessCreateContract* New() const PROTOBUF_FINAL { return New(NULL); }

  WitnessCreateContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WitnessCreateContract& from);
  void MergeFrom(const WitnessCreateContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WitnessCreateContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes owner_address = 1;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 1;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // bytes url = 2;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const void* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:protocol.WitnessCreateContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WitnessUpdateContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.WitnessUpdateContract) */ {
 public:
  WitnessUpdateContract();
  virtual ~WitnessUpdateContract();

  WitnessUpdateContract(const WitnessUpdateContract& from);

  inline WitnessUpdateContract& operator=(const WitnessUpdateContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WitnessUpdateContract(WitnessUpdateContract&& from) noexcept
    : WitnessUpdateContract() {
    *this = ::std::move(from);
  }

  inline WitnessUpdateContract& operator=(WitnessUpdateContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WitnessUpdateContract& default_instance();

  static inline const WitnessUpdateContract* internal_default_instance() {
    return reinterpret_cast<const WitnessUpdateContract*>(
               &_WitnessUpdateContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(WitnessUpdateContract* other);
  friend void swap(WitnessUpdateContract& a, WitnessUpdateContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WitnessUpdateContract* New() const PROTOBUF_FINAL { return New(NULL); }

  WitnessUpdateContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WitnessUpdateContract& from);
  void MergeFrom(const WitnessUpdateContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WitnessUpdateContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes owner_address = 1;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 1;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // bytes update_url = 12;
  void clear_update_url();
  static const int kUpdateUrlFieldNumber = 12;
  const ::std::string& update_url() const;
  void set_update_url(const ::std::string& value);
  #if LANG_CXX11
  void set_update_url(::std::string&& value);
  #endif
  void set_update_url(const char* value);
  void set_update_url(const void* value, size_t size);
  ::std::string* mutable_update_url();
  ::std::string* release_update_url();
  void set_allocated_update_url(::std::string* update_url);

  // @@protoc_insertion_point(class_scope:protocol.WitnessUpdateContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  ::google::protobuf::internal::ArenaStringPtr update_url_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AssetIssueContract_FrozenSupply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.AssetIssueContract.FrozenSupply) */ {
 public:
  AssetIssueContract_FrozenSupply();
  virtual ~AssetIssueContract_FrozenSupply();

  AssetIssueContract_FrozenSupply(const AssetIssueContract_FrozenSupply& from);

  inline AssetIssueContract_FrozenSupply& operator=(const AssetIssueContract_FrozenSupply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AssetIssueContract_FrozenSupply(AssetIssueContract_FrozenSupply&& from) noexcept
    : AssetIssueContract_FrozenSupply() {
    *this = ::std::move(from);
  }

  inline AssetIssueContract_FrozenSupply& operator=(AssetIssueContract_FrozenSupply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AssetIssueContract_FrozenSupply& default_instance();

  static inline const AssetIssueContract_FrozenSupply* internal_default_instance() {
    return reinterpret_cast<const AssetIssueContract_FrozenSupply*>(
               &_AssetIssueContract_FrozenSupply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(AssetIssueContract_FrozenSupply* other);
  friend void swap(AssetIssueContract_FrozenSupply& a, AssetIssueContract_FrozenSupply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssetIssueContract_FrozenSupply* New() const PROTOBUF_FINAL { return New(NULL); }

  AssetIssueContract_FrozenSupply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AssetIssueContract_FrozenSupply& from);
  void MergeFrom(const AssetIssueContract_FrozenSupply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AssetIssueContract_FrozenSupply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 frozen_amount = 1;
  void clear_frozen_amount();
  static const int kFrozenAmountFieldNumber = 1;
  ::google::protobuf::int64 frozen_amount() const;
  void set_frozen_amount(::google::protobuf::int64 value);

  // int64 frozen_days = 2;
  void clear_frozen_days();
  static const int kFrozenDaysFieldNumber = 2;
  ::google::protobuf::int64 frozen_days() const;
  void set_frozen_days(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.AssetIssueContract.FrozenSupply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 frozen_amount_;
  ::google::protobuf::int64 frozen_days_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AssetIssueContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.AssetIssueContract) */ {
 public:
  AssetIssueContract();
  virtual ~AssetIssueContract();

  AssetIssueContract(const AssetIssueContract& from);

  inline AssetIssueContract& operator=(const AssetIssueContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AssetIssueContract(AssetIssueContract&& from) noexcept
    : AssetIssueContract() {
    *this = ::std::move(from);
  }

  inline AssetIssueContract& operator=(AssetIssueContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AssetIssueContract& default_instance();

  static inline const AssetIssueContract* internal_default_instance() {
    return reinterpret_cast<const AssetIssueContract*>(
               &_AssetIssueContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(AssetIssueContract* other);
  friend void swap(AssetIssueContract& a, AssetIssueContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssetIssueContract* New() const PROTOBUF_FINAL { return New(NULL); }

  AssetIssueContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AssetIssueContract& from);
  void MergeFrom(const AssetIssueContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AssetIssueContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AssetIssueContract_FrozenSupply FrozenSupply;

  // accessors -------------------------------------------------------

  // repeated .protocol.AssetIssueContract.FrozenSupply frozen_supply = 5;
  int frozen_supply_size() const;
  void clear_frozen_supply();
  static const int kFrozenSupplyFieldNumber = 5;
  const ::protocol::AssetIssueContract_FrozenSupply& frozen_supply(int index) const;
  ::protocol::AssetIssueContract_FrozenSupply* mutable_frozen_supply(int index);
  ::protocol::AssetIssueContract_FrozenSupply* add_frozen_supply();
  ::google::protobuf::RepeatedPtrField< ::protocol::AssetIssueContract_FrozenSupply >*
      mutable_frozen_supply();
  const ::google::protobuf::RepeatedPtrField< ::protocol::AssetIssueContract_FrozenSupply >&
      frozen_supply() const;

  // bytes owner_address = 1;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 1;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes abbr = 3;
  void clear_abbr();
  static const int kAbbrFieldNumber = 3;
  const ::std::string& abbr() const;
  void set_abbr(const ::std::string& value);
  #if LANG_CXX11
  void set_abbr(::std::string&& value);
  #endif
  void set_abbr(const char* value);
  void set_abbr(const void* value, size_t size);
  ::std::string* mutable_abbr();
  ::std::string* release_abbr();
  void set_allocated_abbr(::std::string* abbr);

  // bytes description = 20;
  void clear_description();
  static const int kDescriptionFieldNumber = 20;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const void* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // bytes url = 21;
  void clear_url();
  static const int kUrlFieldNumber = 21;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const void* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // int64 total_supply = 4;
  void clear_total_supply();
  static const int kTotalSupplyFieldNumber = 4;
  ::google::protobuf::int64 total_supply() const;
  void set_total_supply(::google::protobuf::int64 value);

  // int32 trx_num = 6;
  void clear_trx_num();
  static const int kTrxNumFieldNumber = 6;
  ::google::protobuf::int32 trx_num() const;
  void set_trx_num(::google::protobuf::int32 value);

  // int32 num = 8;
  void clear_num();
  static const int kNumFieldNumber = 8;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // int64 start_time = 9;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 9;
  ::google::protobuf::int64 start_time() const;
  void set_start_time(::google::protobuf::int64 value);

  // int64 end_time = 10;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 10;
  ::google::protobuf::int64 end_time() const;
  void set_end_time(::google::protobuf::int64 value);

  // int32 vote_score = 16;
  void clear_vote_score();
  static const int kVoteScoreFieldNumber = 16;
  ::google::protobuf::int32 vote_score() const;
  void set_vote_score(::google::protobuf::int32 value);

  // int64 free_asset_net_limit = 22;
  void clear_free_asset_net_limit();
  static const int kFreeAssetNetLimitFieldNumber = 22;
  ::google::protobuf::int64 free_asset_net_limit() const;
  void set_free_asset_net_limit(::google::protobuf::int64 value);

  // int64 public_free_asset_net_limit = 23;
  void clear_public_free_asset_net_limit();
  static const int kPublicFreeAssetNetLimitFieldNumber = 23;
  ::google::protobuf::int64 public_free_asset_net_limit() const;
  void set_public_free_asset_net_limit(::google::protobuf::int64 value);

  // int64 public_free_asset_net_usage = 24;
  void clear_public_free_asset_net_usage();
  static const int kPublicFreeAssetNetUsageFieldNumber = 24;
  ::google::protobuf::int64 public_free_asset_net_usage() const;
  void set_public_free_asset_net_usage(::google::protobuf::int64 value);

  // int64 public_latest_free_net_time = 25;
  void clear_public_latest_free_net_time();
  static const int kPublicLatestFreeNetTimeFieldNumber = 25;
  ::google::protobuf::int64 public_latest_free_net_time() const;
  void set_public_latest_free_net_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.AssetIssueContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::AssetIssueContract_FrozenSupply > frozen_supply_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr abbr_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int64 total_supply_;
  ::google::protobuf::int32 trx_num_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int64 start_time_;
  ::google::protobuf::int64 end_time_;
  ::google::protobuf::int32 vote_score_;
  ::google::protobuf::int64 free_asset_net_limit_;
  ::google::protobuf::int64 public_free_asset_net_limit_;
  ::google::protobuf::int64 public_free_asset_net_usage_;
  ::google::protobuf::int64 public_latest_free_net_time_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParticipateAssetIssueContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.ParticipateAssetIssueContract) */ {
 public:
  ParticipateAssetIssueContract();
  virtual ~ParticipateAssetIssueContract();

  ParticipateAssetIssueContract(const ParticipateAssetIssueContract& from);

  inline ParticipateAssetIssueContract& operator=(const ParticipateAssetIssueContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParticipateAssetIssueContract(ParticipateAssetIssueContract&& from) noexcept
    : ParticipateAssetIssueContract() {
    *this = ::std::move(from);
  }

  inline ParticipateAssetIssueContract& operator=(ParticipateAssetIssueContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParticipateAssetIssueContract& default_instance();

  static inline const ParticipateAssetIssueContract* internal_default_instance() {
    return reinterpret_cast<const ParticipateAssetIssueContract*>(
               &_ParticipateAssetIssueContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ParticipateAssetIssueContract* other);
  friend void swap(ParticipateAssetIssueContract& a, ParticipateAssetIssueContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParticipateAssetIssueContract* New() const PROTOBUF_FINAL { return New(NULL); }

  ParticipateAssetIssueContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParticipateAssetIssueContract& from);
  void MergeFrom(const ParticipateAssetIssueContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParticipateAssetIssueContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes owner_address = 1;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 1;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // bytes to_address = 2;
  void clear_to_address();
  static const int kToAddressFieldNumber = 2;
  const ::std::string& to_address() const;
  void set_to_address(const ::std::string& value);
  #if LANG_CXX11
  void set_to_address(::std::string&& value);
  #endif
  void set_to_address(const char* value);
  void set_to_address(const void* value, size_t size);
  ::std::string* mutable_to_address();
  ::std::string* release_to_address();
  void set_allocated_to_address(::std::string* to_address);

  // bytes asset_name = 3;
  void clear_asset_name();
  static const int kAssetNameFieldNumber = 3;
  const ::std::string& asset_name() const;
  void set_asset_name(const ::std::string& value);
  #if LANG_CXX11
  void set_asset_name(::std::string&& value);
  #endif
  void set_asset_name(const char* value);
  void set_asset_name(const void* value, size_t size);
  ::std::string* mutable_asset_name();
  ::std::string* release_asset_name();
  void set_allocated_asset_name(::std::string* asset_name);

  // int64 amount = 4;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.ParticipateAssetIssueContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  ::google::protobuf::internal::ArenaStringPtr to_address_;
  ::google::protobuf::internal::ArenaStringPtr asset_name_;
  ::google::protobuf::int64 amount_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeployContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.DeployContract) */ {
 public:
  DeployContract();
  virtual ~DeployContract();

  DeployContract(const DeployContract& from);

  inline DeployContract& operator=(const DeployContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeployContract(DeployContract&& from) noexcept
    : DeployContract() {
    *this = ::std::move(from);
  }

  inline DeployContract& operator=(DeployContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeployContract& default_instance();

  static inline const DeployContract* internal_default_instance() {
    return reinterpret_cast<const DeployContract*>(
               &_DeployContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(DeployContract* other);
  friend void swap(DeployContract& a, DeployContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeployContract* New() const PROTOBUF_FINAL { return New(NULL); }

  DeployContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeployContract& from);
  void MergeFrom(const DeployContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeployContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes owner_address = 1;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 1;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // bytes script = 2;
  void clear_script();
  static const int kScriptFieldNumber = 2;
  const ::std::string& script() const;
  void set_script(const ::std::string& value);
  #if LANG_CXX11
  void set_script(::std::string&& value);
  #endif
  void set_script(const char* value);
  void set_script(const void* value, size_t size);
  ::std::string* mutable_script();
  ::std::string* release_script();
  void set_allocated_script(::std::string* script);

  // @@protoc_insertion_point(class_scope:protocol.DeployContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  ::google::protobuf::internal::ArenaStringPtr script_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FreezeBalanceContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.FreezeBalanceContract) */ {
 public:
  FreezeBalanceContract();
  virtual ~FreezeBalanceContract();

  FreezeBalanceContract(const FreezeBalanceContract& from);

  inline FreezeBalanceContract& operator=(const FreezeBalanceContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FreezeBalanceContract(FreezeBalanceContract&& from) noexcept
    : FreezeBalanceContract() {
    *this = ::std::move(from);
  }

  inline FreezeBalanceContract& operator=(FreezeBalanceContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FreezeBalanceContract& default_instance();

  static inline const FreezeBalanceContract* internal_default_instance() {
    return reinterpret_cast<const FreezeBalanceContract*>(
               &_FreezeBalanceContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(FreezeBalanceContract* other);
  friend void swap(FreezeBalanceContract& a, FreezeBalanceContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FreezeBalanceContract* New() const PROTOBUF_FINAL { return New(NULL); }

  FreezeBalanceContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FreezeBalanceContract& from);
  void MergeFrom(const FreezeBalanceContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FreezeBalanceContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes owner_address = 1;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 1;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // int64 frozen_balance = 2;
  void clear_frozen_balance();
  static const int kFrozenBalanceFieldNumber = 2;
  ::google::protobuf::int64 frozen_balance() const;
  void set_frozen_balance(::google::protobuf::int64 value);

  // int64 frozen_duration = 3;
  void clear_frozen_duration();
  static const int kFrozenDurationFieldNumber = 3;
  ::google::protobuf::int64 frozen_duration() const;
  void set_frozen_duration(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.FreezeBalanceContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  ::google::protobuf::int64 frozen_balance_;
  ::google::protobuf::int64 frozen_duration_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnfreezeBalanceContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.UnfreezeBalanceContract) */ {
 public:
  UnfreezeBalanceContract();
  virtual ~UnfreezeBalanceContract();

  UnfreezeBalanceContract(const UnfreezeBalanceContract& from);

  inline UnfreezeBalanceContract& operator=(const UnfreezeBalanceContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnfreezeBalanceContract(UnfreezeBalanceContract&& from) noexcept
    : UnfreezeBalanceContract() {
    *this = ::std::move(from);
  }

  inline UnfreezeBalanceContract& operator=(UnfreezeBalanceContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnfreezeBalanceContract& default_instance();

  static inline const UnfreezeBalanceContract* internal_default_instance() {
    return reinterpret_cast<const UnfreezeBalanceContract*>(
               &_UnfreezeBalanceContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(UnfreezeBalanceContract* other);
  friend void swap(UnfreezeBalanceContract& a, UnfreezeBalanceContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnfreezeBalanceContract* New() const PROTOBUF_FINAL { return New(NULL); }

  UnfreezeBalanceContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnfreezeBalanceContract& from);
  void MergeFrom(const UnfreezeBalanceContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnfreezeBalanceContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes owner_address = 1;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 1;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // @@protoc_insertion_point(class_scope:protocol.UnfreezeBalanceContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnfreezeAssetContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.UnfreezeAssetContract) */ {
 public:
  UnfreezeAssetContract();
  virtual ~UnfreezeAssetContract();

  UnfreezeAssetContract(const UnfreezeAssetContract& from);

  inline UnfreezeAssetContract& operator=(const UnfreezeAssetContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnfreezeAssetContract(UnfreezeAssetContract&& from) noexcept
    : UnfreezeAssetContract() {
    *this = ::std::move(from);
  }

  inline UnfreezeAssetContract& operator=(UnfreezeAssetContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnfreezeAssetContract& default_instance();

  static inline const UnfreezeAssetContract* internal_default_instance() {
    return reinterpret_cast<const UnfreezeAssetContract*>(
               &_UnfreezeAssetContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(UnfreezeAssetContract* other);
  friend void swap(UnfreezeAssetContract& a, UnfreezeAssetContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnfreezeAssetContract* New() const PROTOBUF_FINAL { return New(NULL); }

  UnfreezeAssetContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnfreezeAssetContract& from);
  void MergeFrom(const UnfreezeAssetContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnfreezeAssetContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes owner_address = 1;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 1;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // @@protoc_insertion_point(class_scope:protocol.UnfreezeAssetContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WithdrawBalanceContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.WithdrawBalanceContract) */ {
 public:
  WithdrawBalanceContract();
  virtual ~WithdrawBalanceContract();

  WithdrawBalanceContract(const WithdrawBalanceContract& from);

  inline WithdrawBalanceContract& operator=(const WithdrawBalanceContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WithdrawBalanceContract(WithdrawBalanceContract&& from) noexcept
    : WithdrawBalanceContract() {
    *this = ::std::move(from);
  }

  inline WithdrawBalanceContract& operator=(WithdrawBalanceContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WithdrawBalanceContract& default_instance();

  static inline const WithdrawBalanceContract* internal_default_instance() {
    return reinterpret_cast<const WithdrawBalanceContract*>(
               &_WithdrawBalanceContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(WithdrawBalanceContract* other);
  friend void swap(WithdrawBalanceContract& a, WithdrawBalanceContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WithdrawBalanceContract* New() const PROTOBUF_FINAL { return New(NULL); }

  WithdrawBalanceContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WithdrawBalanceContract& from);
  void MergeFrom(const WithdrawBalanceContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WithdrawBalanceContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes owner_address = 1;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 1;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // @@protoc_insertion_point(class_scope:protocol.WithdrawBalanceContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateAssetContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.UpdateAssetContract) */ {
 public:
  UpdateAssetContract();
  virtual ~UpdateAssetContract();

  UpdateAssetContract(const UpdateAssetContract& from);

  inline UpdateAssetContract& operator=(const UpdateAssetContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateAssetContract(UpdateAssetContract&& from) noexcept
    : UpdateAssetContract() {
    *this = ::std::move(from);
  }

  inline UpdateAssetContract& operator=(UpdateAssetContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAssetContract& default_instance();

  static inline const UpdateAssetContract* internal_default_instance() {
    return reinterpret_cast<const UpdateAssetContract*>(
               &_UpdateAssetContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(UpdateAssetContract* other);
  friend void swap(UpdateAssetContract& a, UpdateAssetContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateAssetContract* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateAssetContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateAssetContract& from);
  void MergeFrom(const UpdateAssetContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateAssetContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes owner_address = 1;
  void clear_owner_address();
  static const int kOwnerAddressFieldNumber = 1;
  const ::std::string& owner_address() const;
  void set_owner_address(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_address(::std::string&& value);
  #endif
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  ::std::string* mutable_owner_address();
  ::std::string* release_owner_address();
  void set_allocated_owner_address(::std::string* owner_address);

  // bytes description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const void* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // bytes url = 3;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const void* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // int64 new_limit = 4;
  void clear_new_limit();
  static const int kNewLimitFieldNumber = 4;
  ::google::protobuf::int64 new_limit() const;
  void set_new_limit(::google::protobuf::int64 value);

  // int64 new_public_limit = 5;
  void clear_new_public_limit();
  static const int kNewPublicLimitFieldNumber = 5;
  ::google::protobuf::int64 new_public_limit() const;
  void set_new_public_limit(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.UpdateAssetContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_address_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int64 new_limit_;
  ::google::protobuf::int64 new_public_limit_;
  mutable int _cached_size_;
  friend struct protobuf_core_2fContract_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountCreateContract

// .protocol.AccountType type = 1;
inline void AccountCreateContract::clear_type() {
  type_ = 0;
}
inline ::protocol::AccountType AccountCreateContract::type() const {
  // @@protoc_insertion_point(field_get:protocol.AccountCreateContract.type)
  return static_cast< ::protocol::AccountType >(type_);
}
inline void AccountCreateContract::set_type(::protocol::AccountType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.AccountCreateContract.type)
}

// bytes account_name = 2;
inline void AccountCreateContract::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountCreateContract::account_name() const {
  // @@protoc_insertion_point(field_get:protocol.AccountCreateContract.account_name)
  return account_name_.GetNoArena();
}
inline void AccountCreateContract::set_account_name(const ::std::string& value) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AccountCreateContract.account_name)
}
#if LANG_CXX11
inline void AccountCreateContract::set_account_name(::std::string&& value) {
  
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AccountCreateContract.account_name)
}
#endif
inline void AccountCreateContract::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AccountCreateContract.account_name)
}
inline void AccountCreateContract::set_account_name(const void* value, size_t size) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AccountCreateContract.account_name)
}
inline ::std::string* AccountCreateContract::mutable_account_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AccountCreateContract.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountCreateContract::release_account_name() {
  // @@protoc_insertion_point(field_release:protocol.AccountCreateContract.account_name)
  
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountCreateContract::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    
  } else {
    
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountCreateContract.account_name)
}

// bytes owner_address = 3;
inline void AccountCreateContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountCreateContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.AccountCreateContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void AccountCreateContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AccountCreateContract.owner_address)
}
#if LANG_CXX11
inline void AccountCreateContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AccountCreateContract.owner_address)
}
#endif
inline void AccountCreateContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AccountCreateContract.owner_address)
}
inline void AccountCreateContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AccountCreateContract.owner_address)
}
inline ::std::string* AccountCreateContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AccountCreateContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountCreateContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.AccountCreateContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountCreateContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountCreateContract.owner_address)
}

// -------------------------------------------------------------------

// AccountUpdateContract

// bytes account_name = 1;
inline void AccountUpdateContract::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountUpdateContract::account_name() const {
  // @@protoc_insertion_point(field_get:protocol.AccountUpdateContract.account_name)
  return account_name_.GetNoArena();
}
inline void AccountUpdateContract::set_account_name(const ::std::string& value) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AccountUpdateContract.account_name)
}
#if LANG_CXX11
inline void AccountUpdateContract::set_account_name(::std::string&& value) {
  
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AccountUpdateContract.account_name)
}
#endif
inline void AccountUpdateContract::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AccountUpdateContract.account_name)
}
inline void AccountUpdateContract::set_account_name(const void* value, size_t size) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AccountUpdateContract.account_name)
}
inline ::std::string* AccountUpdateContract::mutable_account_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AccountUpdateContract.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountUpdateContract::release_account_name() {
  // @@protoc_insertion_point(field_release:protocol.AccountUpdateContract.account_name)
  
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountUpdateContract::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    
  } else {
    
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountUpdateContract.account_name)
}

// bytes owner_address = 2;
inline void AccountUpdateContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountUpdateContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.AccountUpdateContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void AccountUpdateContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AccountUpdateContract.owner_address)
}
#if LANG_CXX11
inline void AccountUpdateContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AccountUpdateContract.owner_address)
}
#endif
inline void AccountUpdateContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AccountUpdateContract.owner_address)
}
inline void AccountUpdateContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AccountUpdateContract.owner_address)
}
inline ::std::string* AccountUpdateContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AccountUpdateContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountUpdateContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.AccountUpdateContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountUpdateContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountUpdateContract.owner_address)
}

// -------------------------------------------------------------------

// TransferContract

// bytes owner_address = 1;
inline void TransferContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.TransferContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void TransferContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransferContract.owner_address)
}
#if LANG_CXX11
inline void TransferContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TransferContract.owner_address)
}
#endif
inline void TransferContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransferContract.owner_address)
}
inline void TransferContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransferContract.owner_address)
}
inline ::std::string* TransferContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TransferContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.TransferContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransferContract.owner_address)
}

// bytes to_address = 2;
inline void TransferContract::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferContract::to_address() const {
  // @@protoc_insertion_point(field_get:protocol.TransferContract.to_address)
  return to_address_.GetNoArena();
}
inline void TransferContract::set_to_address(const ::std::string& value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransferContract.to_address)
}
#if LANG_CXX11
inline void TransferContract::set_to_address(::std::string&& value) {
  
  to_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TransferContract.to_address)
}
#endif
inline void TransferContract::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransferContract.to_address)
}
inline void TransferContract::set_to_address(const void* value, size_t size) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransferContract.to_address)
}
inline ::std::string* TransferContract::mutable_to_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TransferContract.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferContract::release_to_address() {
  // @@protoc_insertion_point(field_release:protocol.TransferContract.to_address)
  
  return to_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferContract::set_allocated_to_address(::std::string* to_address) {
  if (to_address != NULL) {
    
  } else {
    
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransferContract.to_address)
}

// int64 amount = 3;
inline void TransferContract::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransferContract::amount() const {
  // @@protoc_insertion_point(field_get:protocol.TransferContract.amount)
  return amount_;
}
inline void TransferContract::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransferContract.amount)
}

// -------------------------------------------------------------------

// TransferAssetContract

// bytes asset_name = 1;
inline void TransferAssetContract::clear_asset_name() {
  asset_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferAssetContract::asset_name() const {
  // @@protoc_insertion_point(field_get:protocol.TransferAssetContract.asset_name)
  return asset_name_.GetNoArena();
}
inline void TransferAssetContract::set_asset_name(const ::std::string& value) {
  
  asset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransferAssetContract.asset_name)
}
#if LANG_CXX11
inline void TransferAssetContract::set_asset_name(::std::string&& value) {
  
  asset_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TransferAssetContract.asset_name)
}
#endif
inline void TransferAssetContract::set_asset_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  asset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransferAssetContract.asset_name)
}
inline void TransferAssetContract::set_asset_name(const void* value, size_t size) {
  
  asset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransferAssetContract.asset_name)
}
inline ::std::string* TransferAssetContract::mutable_asset_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TransferAssetContract.asset_name)
  return asset_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferAssetContract::release_asset_name() {
  // @@protoc_insertion_point(field_release:protocol.TransferAssetContract.asset_name)
  
  return asset_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferAssetContract::set_allocated_asset_name(::std::string* asset_name) {
  if (asset_name != NULL) {
    
  } else {
    
  }
  asset_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransferAssetContract.asset_name)
}

// bytes owner_address = 2;
inline void TransferAssetContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferAssetContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.TransferAssetContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void TransferAssetContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransferAssetContract.owner_address)
}
#if LANG_CXX11
inline void TransferAssetContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TransferAssetContract.owner_address)
}
#endif
inline void TransferAssetContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransferAssetContract.owner_address)
}
inline void TransferAssetContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransferAssetContract.owner_address)
}
inline ::std::string* TransferAssetContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TransferAssetContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferAssetContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.TransferAssetContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferAssetContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransferAssetContract.owner_address)
}

// bytes to_address = 3;
inline void TransferAssetContract::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferAssetContract::to_address() const {
  // @@protoc_insertion_point(field_get:protocol.TransferAssetContract.to_address)
  return to_address_.GetNoArena();
}
inline void TransferAssetContract::set_to_address(const ::std::string& value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransferAssetContract.to_address)
}
#if LANG_CXX11
inline void TransferAssetContract::set_to_address(::std::string&& value) {
  
  to_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TransferAssetContract.to_address)
}
#endif
inline void TransferAssetContract::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransferAssetContract.to_address)
}
inline void TransferAssetContract::set_to_address(const void* value, size_t size) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransferAssetContract.to_address)
}
inline ::std::string* TransferAssetContract::mutable_to_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TransferAssetContract.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferAssetContract::release_to_address() {
  // @@protoc_insertion_point(field_release:protocol.TransferAssetContract.to_address)
  
  return to_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferAssetContract::set_allocated_to_address(::std::string* to_address) {
  if (to_address != NULL) {
    
  } else {
    
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransferAssetContract.to_address)
}

// int64 amount = 4;
inline void TransferAssetContract::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransferAssetContract::amount() const {
  // @@protoc_insertion_point(field_get:protocol.TransferAssetContract.amount)
  return amount_;
}
inline void TransferAssetContract::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransferAssetContract.amount)
}

// -------------------------------------------------------------------

// VoteAssetContract

// bytes owner_address = 1;
inline void VoteAssetContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VoteAssetContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.VoteAssetContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void VoteAssetContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.VoteAssetContract.owner_address)
}
#if LANG_CXX11
inline void VoteAssetContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.VoteAssetContract.owner_address)
}
#endif
inline void VoteAssetContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.VoteAssetContract.owner_address)
}
inline void VoteAssetContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.VoteAssetContract.owner_address)
}
inline ::std::string* VoteAssetContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.VoteAssetContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteAssetContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.VoteAssetContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteAssetContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.VoteAssetContract.owner_address)
}

// repeated bytes vote_address = 2;
inline int VoteAssetContract::vote_address_size() const {
  return vote_address_.size();
}
inline void VoteAssetContract::clear_vote_address() {
  vote_address_.Clear();
}
inline const ::std::string& VoteAssetContract::vote_address(int index) const {
  // @@protoc_insertion_point(field_get:protocol.VoteAssetContract.vote_address)
  return vote_address_.Get(index);
}
inline ::std::string* VoteAssetContract::mutable_vote_address(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.VoteAssetContract.vote_address)
  return vote_address_.Mutable(index);
}
inline void VoteAssetContract::set_vote_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.VoteAssetContract.vote_address)
  vote_address_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VoteAssetContract::set_vote_address(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.VoteAssetContract.vote_address)
  vote_address_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VoteAssetContract::set_vote_address(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vote_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.VoteAssetContract.vote_address)
}
inline void VoteAssetContract::set_vote_address(int index, const void* value, size_t size) {
  vote_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.VoteAssetContract.vote_address)
}
inline ::std::string* VoteAssetContract::add_vote_address() {
  // @@protoc_insertion_point(field_add_mutable:protocol.VoteAssetContract.vote_address)
  return vote_address_.Add();
}
inline void VoteAssetContract::add_vote_address(const ::std::string& value) {
  vote_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.VoteAssetContract.vote_address)
}
#if LANG_CXX11
inline void VoteAssetContract::add_vote_address(::std::string&& value) {
  vote_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.VoteAssetContract.vote_address)
}
#endif
inline void VoteAssetContract::add_vote_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vote_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.VoteAssetContract.vote_address)
}
inline void VoteAssetContract::add_vote_address(const void* value, size_t size) {
  vote_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.VoteAssetContract.vote_address)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VoteAssetContract::vote_address() const {
  // @@protoc_insertion_point(field_list:protocol.VoteAssetContract.vote_address)
  return vote_address_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VoteAssetContract::mutable_vote_address() {
  // @@protoc_insertion_point(field_mutable_list:protocol.VoteAssetContract.vote_address)
  return &vote_address_;
}

// bool support = 3;
inline void VoteAssetContract::clear_support() {
  support_ = false;
}
inline bool VoteAssetContract::support() const {
  // @@protoc_insertion_point(field_get:protocol.VoteAssetContract.support)
  return support_;
}
inline void VoteAssetContract::set_support(bool value) {
  
  support_ = value;
  // @@protoc_insertion_point(field_set:protocol.VoteAssetContract.support)
}

// int32 count = 5;
inline void VoteAssetContract::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 VoteAssetContract::count() const {
  // @@protoc_insertion_point(field_get:protocol.VoteAssetContract.count)
  return count_;
}
inline void VoteAssetContract::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:protocol.VoteAssetContract.count)
}

// -------------------------------------------------------------------

// VoteWitnessContract_Vote

// bytes vote_address = 1;
inline void VoteWitnessContract_Vote::clear_vote_address() {
  vote_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VoteWitnessContract_Vote::vote_address() const {
  // @@protoc_insertion_point(field_get:protocol.VoteWitnessContract.Vote.vote_address)
  return vote_address_.GetNoArena();
}
inline void VoteWitnessContract_Vote::set_vote_address(const ::std::string& value) {
  
  vote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.VoteWitnessContract.Vote.vote_address)
}
#if LANG_CXX11
inline void VoteWitnessContract_Vote::set_vote_address(::std::string&& value) {
  
  vote_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.VoteWitnessContract.Vote.vote_address)
}
#endif
inline void VoteWitnessContract_Vote::set_vote_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.VoteWitnessContract.Vote.vote_address)
}
inline void VoteWitnessContract_Vote::set_vote_address(const void* value, size_t size) {
  
  vote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.VoteWitnessContract.Vote.vote_address)
}
inline ::std::string* VoteWitnessContract_Vote::mutable_vote_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.VoteWitnessContract.Vote.vote_address)
  return vote_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteWitnessContract_Vote::release_vote_address() {
  // @@protoc_insertion_point(field_release:protocol.VoteWitnessContract.Vote.vote_address)
  
  return vote_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteWitnessContract_Vote::set_allocated_vote_address(::std::string* vote_address) {
  if (vote_address != NULL) {
    
  } else {
    
  }
  vote_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vote_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.VoteWitnessContract.Vote.vote_address)
}

// int64 vote_count = 2;
inline void VoteWitnessContract_Vote::clear_vote_count() {
  vote_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VoteWitnessContract_Vote::vote_count() const {
  // @@protoc_insertion_point(field_get:protocol.VoteWitnessContract.Vote.vote_count)
  return vote_count_;
}
inline void VoteWitnessContract_Vote::set_vote_count(::google::protobuf::int64 value) {
  
  vote_count_ = value;
  // @@protoc_insertion_point(field_set:protocol.VoteWitnessContract.Vote.vote_count)
}

// -------------------------------------------------------------------

// VoteWitnessContract

// bytes owner_address = 1;
inline void VoteWitnessContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VoteWitnessContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.VoteWitnessContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void VoteWitnessContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.VoteWitnessContract.owner_address)
}
#if LANG_CXX11
inline void VoteWitnessContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.VoteWitnessContract.owner_address)
}
#endif
inline void VoteWitnessContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.VoteWitnessContract.owner_address)
}
inline void VoteWitnessContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.VoteWitnessContract.owner_address)
}
inline ::std::string* VoteWitnessContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.VoteWitnessContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteWitnessContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.VoteWitnessContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteWitnessContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.VoteWitnessContract.owner_address)
}

// repeated .protocol.VoteWitnessContract.Vote votes = 2;
inline int VoteWitnessContract::votes_size() const {
  return votes_.size();
}
inline void VoteWitnessContract::clear_votes() {
  votes_.Clear();
}
inline const ::protocol::VoteWitnessContract_Vote& VoteWitnessContract::votes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.VoteWitnessContract.votes)
  return votes_.Get(index);
}
inline ::protocol::VoteWitnessContract_Vote* VoteWitnessContract::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.VoteWitnessContract.votes)
  return votes_.Mutable(index);
}
inline ::protocol::VoteWitnessContract_Vote* VoteWitnessContract::add_votes() {
  // @@protoc_insertion_point(field_add:protocol.VoteWitnessContract.votes)
  return votes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::VoteWitnessContract_Vote >*
VoteWitnessContract::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.VoteWitnessContract.votes)
  return &votes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::VoteWitnessContract_Vote >&
VoteWitnessContract::votes() const {
  // @@protoc_insertion_point(field_list:protocol.VoteWitnessContract.votes)
  return votes_;
}

// bool support = 3;
inline void VoteWitnessContract::clear_support() {
  support_ = false;
}
inline bool VoteWitnessContract::support() const {
  // @@protoc_insertion_point(field_get:protocol.VoteWitnessContract.support)
  return support_;
}
inline void VoteWitnessContract::set_support(bool value) {
  
  support_ = value;
  // @@protoc_insertion_point(field_set:protocol.VoteWitnessContract.support)
}

// -------------------------------------------------------------------

// WitnessCreateContract

// bytes owner_address = 1;
inline void WitnessCreateContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessCreateContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.WitnessCreateContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void WitnessCreateContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.WitnessCreateContract.owner_address)
}
#if LANG_CXX11
inline void WitnessCreateContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.WitnessCreateContract.owner_address)
}
#endif
inline void WitnessCreateContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.WitnessCreateContract.owner_address)
}
inline void WitnessCreateContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.WitnessCreateContract.owner_address)
}
inline ::std::string* WitnessCreateContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.WitnessCreateContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessCreateContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.WitnessCreateContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessCreateContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.WitnessCreateContract.owner_address)
}

// bytes url = 2;
inline void WitnessCreateContract::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessCreateContract::url() const {
  // @@protoc_insertion_point(field_get:protocol.WitnessCreateContract.url)
  return url_.GetNoArena();
}
inline void WitnessCreateContract::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.WitnessCreateContract.url)
}
#if LANG_CXX11
inline void WitnessCreateContract::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.WitnessCreateContract.url)
}
#endif
inline void WitnessCreateContract::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.WitnessCreateContract.url)
}
inline void WitnessCreateContract::set_url(const void* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.WitnessCreateContract.url)
}
inline ::std::string* WitnessCreateContract::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:protocol.WitnessCreateContract.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessCreateContract::release_url() {
  // @@protoc_insertion_point(field_release:protocol.WitnessCreateContract.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessCreateContract::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:protocol.WitnessCreateContract.url)
}

// -------------------------------------------------------------------

// WitnessUpdateContract

// bytes owner_address = 1;
inline void WitnessUpdateContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessUpdateContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.WitnessUpdateContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void WitnessUpdateContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.WitnessUpdateContract.owner_address)
}
#if LANG_CXX11
inline void WitnessUpdateContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.WitnessUpdateContract.owner_address)
}
#endif
inline void WitnessUpdateContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.WitnessUpdateContract.owner_address)
}
inline void WitnessUpdateContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.WitnessUpdateContract.owner_address)
}
inline ::std::string* WitnessUpdateContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.WitnessUpdateContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessUpdateContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.WitnessUpdateContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessUpdateContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.WitnessUpdateContract.owner_address)
}

// bytes update_url = 12;
inline void WitnessUpdateContract::clear_update_url() {
  update_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WitnessUpdateContract::update_url() const {
  // @@protoc_insertion_point(field_get:protocol.WitnessUpdateContract.update_url)
  return update_url_.GetNoArena();
}
inline void WitnessUpdateContract::set_update_url(const ::std::string& value) {
  
  update_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.WitnessUpdateContract.update_url)
}
#if LANG_CXX11
inline void WitnessUpdateContract::set_update_url(::std::string&& value) {
  
  update_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.WitnessUpdateContract.update_url)
}
#endif
inline void WitnessUpdateContract::set_update_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  update_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.WitnessUpdateContract.update_url)
}
inline void WitnessUpdateContract::set_update_url(const void* value, size_t size) {
  
  update_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.WitnessUpdateContract.update_url)
}
inline ::std::string* WitnessUpdateContract::mutable_update_url() {
  
  // @@protoc_insertion_point(field_mutable:protocol.WitnessUpdateContract.update_url)
  return update_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WitnessUpdateContract::release_update_url() {
  // @@protoc_insertion_point(field_release:protocol.WitnessUpdateContract.update_url)
  
  return update_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessUpdateContract::set_allocated_update_url(::std::string* update_url) {
  if (update_url != NULL) {
    
  } else {
    
  }
  update_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_url);
  // @@protoc_insertion_point(field_set_allocated:protocol.WitnessUpdateContract.update_url)
}

// -------------------------------------------------------------------

// AssetIssueContract_FrozenSupply

// int64 frozen_amount = 1;
inline void AssetIssueContract_FrozenSupply::clear_frozen_amount() {
  frozen_amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AssetIssueContract_FrozenSupply::frozen_amount() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.FrozenSupply.frozen_amount)
  return frozen_amount_;
}
inline void AssetIssueContract_FrozenSupply::set_frozen_amount(::google::protobuf::int64 value) {
  
  frozen_amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.FrozenSupply.frozen_amount)
}

// int64 frozen_days = 2;
inline void AssetIssueContract_FrozenSupply::clear_frozen_days() {
  frozen_days_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AssetIssueContract_FrozenSupply::frozen_days() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.FrozenSupply.frozen_days)
  return frozen_days_;
}
inline void AssetIssueContract_FrozenSupply::set_frozen_days(::google::protobuf::int64 value) {
  
  frozen_days_ = value;
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.FrozenSupply.frozen_days)
}

// -------------------------------------------------------------------

// AssetIssueContract

// bytes owner_address = 1;
inline void AssetIssueContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AssetIssueContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void AssetIssueContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.owner_address)
}
#if LANG_CXX11
inline void AssetIssueContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AssetIssueContract.owner_address)
}
#endif
inline void AssetIssueContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AssetIssueContract.owner_address)
}
inline void AssetIssueContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AssetIssueContract.owner_address)
}
inline ::std::string* AssetIssueContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AssetIssueContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssetIssueContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.AssetIssueContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetIssueContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.AssetIssueContract.owner_address)
}

// bytes name = 2;
inline void AssetIssueContract::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AssetIssueContract::name() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.name)
  return name_.GetNoArena();
}
inline void AssetIssueContract::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.name)
}
#if LANG_CXX11
inline void AssetIssueContract::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AssetIssueContract.name)
}
#endif
inline void AssetIssueContract::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AssetIssueContract.name)
}
inline void AssetIssueContract::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AssetIssueContract.name)
}
inline ::std::string* AssetIssueContract::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AssetIssueContract.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssetIssueContract::release_name() {
  // @@protoc_insertion_point(field_release:protocol.AssetIssueContract.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetIssueContract::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.AssetIssueContract.name)
}

// bytes abbr = 3;
inline void AssetIssueContract::clear_abbr() {
  abbr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AssetIssueContract::abbr() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.abbr)
  return abbr_.GetNoArena();
}
inline void AssetIssueContract::set_abbr(const ::std::string& value) {
  
  abbr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.abbr)
}
#if LANG_CXX11
inline void AssetIssueContract::set_abbr(::std::string&& value) {
  
  abbr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AssetIssueContract.abbr)
}
#endif
inline void AssetIssueContract::set_abbr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  abbr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AssetIssueContract.abbr)
}
inline void AssetIssueContract::set_abbr(const void* value, size_t size) {
  
  abbr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AssetIssueContract.abbr)
}
inline ::std::string* AssetIssueContract::mutable_abbr() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AssetIssueContract.abbr)
  return abbr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssetIssueContract::release_abbr() {
  // @@protoc_insertion_point(field_release:protocol.AssetIssueContract.abbr)
  
  return abbr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetIssueContract::set_allocated_abbr(::std::string* abbr) {
  if (abbr != NULL) {
    
  } else {
    
  }
  abbr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), abbr);
  // @@protoc_insertion_point(field_set_allocated:protocol.AssetIssueContract.abbr)
}

// int64 total_supply = 4;
inline void AssetIssueContract::clear_total_supply() {
  total_supply_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AssetIssueContract::total_supply() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.total_supply)
  return total_supply_;
}
inline void AssetIssueContract::set_total_supply(::google::protobuf::int64 value) {
  
  total_supply_ = value;
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.total_supply)
}

// repeated .protocol.AssetIssueContract.FrozenSupply frozen_supply = 5;
inline int AssetIssueContract::frozen_supply_size() const {
  return frozen_supply_.size();
}
inline void AssetIssueContract::clear_frozen_supply() {
  frozen_supply_.Clear();
}
inline const ::protocol::AssetIssueContract_FrozenSupply& AssetIssueContract::frozen_supply(int index) const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.frozen_supply)
  return frozen_supply_.Get(index);
}
inline ::protocol::AssetIssueContract_FrozenSupply* AssetIssueContract::mutable_frozen_supply(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.AssetIssueContract.frozen_supply)
  return frozen_supply_.Mutable(index);
}
inline ::protocol::AssetIssueContract_FrozenSupply* AssetIssueContract::add_frozen_supply() {
  // @@protoc_insertion_point(field_add:protocol.AssetIssueContract.frozen_supply)
  return frozen_supply_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::AssetIssueContract_FrozenSupply >*
AssetIssueContract::mutable_frozen_supply() {
  // @@protoc_insertion_point(field_mutable_list:protocol.AssetIssueContract.frozen_supply)
  return &frozen_supply_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::AssetIssueContract_FrozenSupply >&
AssetIssueContract::frozen_supply() const {
  // @@protoc_insertion_point(field_list:protocol.AssetIssueContract.frozen_supply)
  return frozen_supply_;
}

// int32 trx_num = 6;
inline void AssetIssueContract::clear_trx_num() {
  trx_num_ = 0;
}
inline ::google::protobuf::int32 AssetIssueContract::trx_num() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.trx_num)
  return trx_num_;
}
inline void AssetIssueContract::set_trx_num(::google::protobuf::int32 value) {
  
  trx_num_ = value;
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.trx_num)
}

// int32 num = 8;
inline void AssetIssueContract::clear_num() {
  num_ = 0;
}
inline ::google::protobuf::int32 AssetIssueContract::num() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.num)
  return num_;
}
inline void AssetIssueContract::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.num)
}

// int64 start_time = 9;
inline void AssetIssueContract::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AssetIssueContract::start_time() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.start_time)
  return start_time_;
}
inline void AssetIssueContract::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.start_time)
}

// int64 end_time = 10;
inline void AssetIssueContract::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AssetIssueContract::end_time() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.end_time)
  return end_time_;
}
inline void AssetIssueContract::set_end_time(::google::protobuf::int64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.end_time)
}

// int32 vote_score = 16;
inline void AssetIssueContract::clear_vote_score() {
  vote_score_ = 0;
}
inline ::google::protobuf::int32 AssetIssueContract::vote_score() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.vote_score)
  return vote_score_;
}
inline void AssetIssueContract::set_vote_score(::google::protobuf::int32 value) {
  
  vote_score_ = value;
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.vote_score)
}

// bytes description = 20;
inline void AssetIssueContract::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AssetIssueContract::description() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.description)
  return description_.GetNoArena();
}
inline void AssetIssueContract::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.description)
}
#if LANG_CXX11
inline void AssetIssueContract::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AssetIssueContract.description)
}
#endif
inline void AssetIssueContract::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AssetIssueContract.description)
}
inline void AssetIssueContract::set_description(const void* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AssetIssueContract.description)
}
inline ::std::string* AssetIssueContract::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AssetIssueContract.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssetIssueContract::release_description() {
  // @@protoc_insertion_point(field_release:protocol.AssetIssueContract.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetIssueContract::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:protocol.AssetIssueContract.description)
}

// bytes url = 21;
inline void AssetIssueContract::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AssetIssueContract::url() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.url)
  return url_.GetNoArena();
}
inline void AssetIssueContract::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.url)
}
#if LANG_CXX11
inline void AssetIssueContract::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AssetIssueContract.url)
}
#endif
inline void AssetIssueContract::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AssetIssueContract.url)
}
inline void AssetIssueContract::set_url(const void* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AssetIssueContract.url)
}
inline ::std::string* AssetIssueContract::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AssetIssueContract.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssetIssueContract::release_url() {
  // @@protoc_insertion_point(field_release:protocol.AssetIssueContract.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetIssueContract::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:protocol.AssetIssueContract.url)
}

// int64 free_asset_net_limit = 22;
inline void AssetIssueContract::clear_free_asset_net_limit() {
  free_asset_net_limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AssetIssueContract::free_asset_net_limit() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.free_asset_net_limit)
  return free_asset_net_limit_;
}
inline void AssetIssueContract::set_free_asset_net_limit(::google::protobuf::int64 value) {
  
  free_asset_net_limit_ = value;
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.free_asset_net_limit)
}

// int64 public_free_asset_net_limit = 23;
inline void AssetIssueContract::clear_public_free_asset_net_limit() {
  public_free_asset_net_limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AssetIssueContract::public_free_asset_net_limit() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.public_free_asset_net_limit)
  return public_free_asset_net_limit_;
}
inline void AssetIssueContract::set_public_free_asset_net_limit(::google::protobuf::int64 value) {
  
  public_free_asset_net_limit_ = value;
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.public_free_asset_net_limit)
}

// int64 public_free_asset_net_usage = 24;
inline void AssetIssueContract::clear_public_free_asset_net_usage() {
  public_free_asset_net_usage_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AssetIssueContract::public_free_asset_net_usage() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.public_free_asset_net_usage)
  return public_free_asset_net_usage_;
}
inline void AssetIssueContract::set_public_free_asset_net_usage(::google::protobuf::int64 value) {
  
  public_free_asset_net_usage_ = value;
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.public_free_asset_net_usage)
}

// int64 public_latest_free_net_time = 25;
inline void AssetIssueContract::clear_public_latest_free_net_time() {
  public_latest_free_net_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AssetIssueContract::public_latest_free_net_time() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.public_latest_free_net_time)
  return public_latest_free_net_time_;
}
inline void AssetIssueContract::set_public_latest_free_net_time(::google::protobuf::int64 value) {
  
  public_latest_free_net_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.public_latest_free_net_time)
}

// -------------------------------------------------------------------

// ParticipateAssetIssueContract

// bytes owner_address = 1;
inline void ParticipateAssetIssueContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParticipateAssetIssueContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.ParticipateAssetIssueContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void ParticipateAssetIssueContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ParticipateAssetIssueContract.owner_address)
}
#if LANG_CXX11
inline void ParticipateAssetIssueContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ParticipateAssetIssueContract.owner_address)
}
#endif
inline void ParticipateAssetIssueContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ParticipateAssetIssueContract.owner_address)
}
inline void ParticipateAssetIssueContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ParticipateAssetIssueContract.owner_address)
}
inline ::std::string* ParticipateAssetIssueContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ParticipateAssetIssueContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParticipateAssetIssueContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.ParticipateAssetIssueContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParticipateAssetIssueContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.ParticipateAssetIssueContract.owner_address)
}

// bytes to_address = 2;
inline void ParticipateAssetIssueContract::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParticipateAssetIssueContract::to_address() const {
  // @@protoc_insertion_point(field_get:protocol.ParticipateAssetIssueContract.to_address)
  return to_address_.GetNoArena();
}
inline void ParticipateAssetIssueContract::set_to_address(const ::std::string& value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ParticipateAssetIssueContract.to_address)
}
#if LANG_CXX11
inline void ParticipateAssetIssueContract::set_to_address(::std::string&& value) {
  
  to_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ParticipateAssetIssueContract.to_address)
}
#endif
inline void ParticipateAssetIssueContract::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ParticipateAssetIssueContract.to_address)
}
inline void ParticipateAssetIssueContract::set_to_address(const void* value, size_t size) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ParticipateAssetIssueContract.to_address)
}
inline ::std::string* ParticipateAssetIssueContract::mutable_to_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ParticipateAssetIssueContract.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParticipateAssetIssueContract::release_to_address() {
  // @@protoc_insertion_point(field_release:protocol.ParticipateAssetIssueContract.to_address)
  
  return to_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParticipateAssetIssueContract::set_allocated_to_address(::std::string* to_address) {
  if (to_address != NULL) {
    
  } else {
    
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.ParticipateAssetIssueContract.to_address)
}

// bytes asset_name = 3;
inline void ParticipateAssetIssueContract::clear_asset_name() {
  asset_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParticipateAssetIssueContract::asset_name() const {
  // @@protoc_insertion_point(field_get:protocol.ParticipateAssetIssueContract.asset_name)
  return asset_name_.GetNoArena();
}
inline void ParticipateAssetIssueContract::set_asset_name(const ::std::string& value) {
  
  asset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ParticipateAssetIssueContract.asset_name)
}
#if LANG_CXX11
inline void ParticipateAssetIssueContract::set_asset_name(::std::string&& value) {
  
  asset_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ParticipateAssetIssueContract.asset_name)
}
#endif
inline void ParticipateAssetIssueContract::set_asset_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  asset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ParticipateAssetIssueContract.asset_name)
}
inline void ParticipateAssetIssueContract::set_asset_name(const void* value, size_t size) {
  
  asset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ParticipateAssetIssueContract.asset_name)
}
inline ::std::string* ParticipateAssetIssueContract::mutable_asset_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ParticipateAssetIssueContract.asset_name)
  return asset_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParticipateAssetIssueContract::release_asset_name() {
  // @@protoc_insertion_point(field_release:protocol.ParticipateAssetIssueContract.asset_name)
  
  return asset_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParticipateAssetIssueContract::set_allocated_asset_name(::std::string* asset_name) {
  if (asset_name != NULL) {
    
  } else {
    
  }
  asset_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.ParticipateAssetIssueContract.asset_name)
}

// int64 amount = 4;
inline void ParticipateAssetIssueContract::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ParticipateAssetIssueContract::amount() const {
  // @@protoc_insertion_point(field_get:protocol.ParticipateAssetIssueContract.amount)
  return amount_;
}
inline void ParticipateAssetIssueContract::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.ParticipateAssetIssueContract.amount)
}

// -------------------------------------------------------------------

// DeployContract

// bytes owner_address = 1;
inline void DeployContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeployContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.DeployContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void DeployContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.DeployContract.owner_address)
}
#if LANG_CXX11
inline void DeployContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.DeployContract.owner_address)
}
#endif
inline void DeployContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.DeployContract.owner_address)
}
inline void DeployContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.DeployContract.owner_address)
}
inline ::std::string* DeployContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.DeployContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeployContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.DeployContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeployContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.DeployContract.owner_address)
}

// bytes script = 2;
inline void DeployContract::clear_script() {
  script_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeployContract::script() const {
  // @@protoc_insertion_point(field_get:protocol.DeployContract.script)
  return script_.GetNoArena();
}
inline void DeployContract::set_script(const ::std::string& value) {
  
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.DeployContract.script)
}
#if LANG_CXX11
inline void DeployContract::set_script(::std::string&& value) {
  
  script_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.DeployContract.script)
}
#endif
inline void DeployContract::set_script(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.DeployContract.script)
}
inline void DeployContract::set_script(const void* value, size_t size) {
  
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.DeployContract.script)
}
inline ::std::string* DeployContract::mutable_script() {
  
  // @@protoc_insertion_point(field_mutable:protocol.DeployContract.script)
  return script_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeployContract::release_script() {
  // @@protoc_insertion_point(field_release:protocol.DeployContract.script)
  
  return script_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeployContract::set_allocated_script(::std::string* script) {
  if (script != NULL) {
    
  } else {
    
  }
  script_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script);
  // @@protoc_insertion_point(field_set_allocated:protocol.DeployContract.script)
}

// -------------------------------------------------------------------

// FreezeBalanceContract

// bytes owner_address = 1;
inline void FreezeBalanceContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FreezeBalanceContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.FreezeBalanceContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void FreezeBalanceContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.FreezeBalanceContract.owner_address)
}
#if LANG_CXX11
inline void FreezeBalanceContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.FreezeBalanceContract.owner_address)
}
#endif
inline void FreezeBalanceContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.FreezeBalanceContract.owner_address)
}
inline void FreezeBalanceContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.FreezeBalanceContract.owner_address)
}
inline ::std::string* FreezeBalanceContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.FreezeBalanceContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FreezeBalanceContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.FreezeBalanceContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FreezeBalanceContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.FreezeBalanceContract.owner_address)
}

// int64 frozen_balance = 2;
inline void FreezeBalanceContract::clear_frozen_balance() {
  frozen_balance_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FreezeBalanceContract::frozen_balance() const {
  // @@protoc_insertion_point(field_get:protocol.FreezeBalanceContract.frozen_balance)
  return frozen_balance_;
}
inline void FreezeBalanceContract::set_frozen_balance(::google::protobuf::int64 value) {
  
  frozen_balance_ = value;
  // @@protoc_insertion_point(field_set:protocol.FreezeBalanceContract.frozen_balance)
}

// int64 frozen_duration = 3;
inline void FreezeBalanceContract::clear_frozen_duration() {
  frozen_duration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FreezeBalanceContract::frozen_duration() const {
  // @@protoc_insertion_point(field_get:protocol.FreezeBalanceContract.frozen_duration)
  return frozen_duration_;
}
inline void FreezeBalanceContract::set_frozen_duration(::google::protobuf::int64 value) {
  
  frozen_duration_ = value;
  // @@protoc_insertion_point(field_set:protocol.FreezeBalanceContract.frozen_duration)
}

// -------------------------------------------------------------------

// UnfreezeBalanceContract

// bytes owner_address = 1;
inline void UnfreezeBalanceContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnfreezeBalanceContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.UnfreezeBalanceContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void UnfreezeBalanceContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UnfreezeBalanceContract.owner_address)
}
#if LANG_CXX11
inline void UnfreezeBalanceContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UnfreezeBalanceContract.owner_address)
}
#endif
inline void UnfreezeBalanceContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UnfreezeBalanceContract.owner_address)
}
inline void UnfreezeBalanceContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UnfreezeBalanceContract.owner_address)
}
inline ::std::string* UnfreezeBalanceContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.UnfreezeBalanceContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnfreezeBalanceContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.UnfreezeBalanceContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnfreezeBalanceContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.UnfreezeBalanceContract.owner_address)
}

// -------------------------------------------------------------------

// UnfreezeAssetContract

// bytes owner_address = 1;
inline void UnfreezeAssetContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnfreezeAssetContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.UnfreezeAssetContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void UnfreezeAssetContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UnfreezeAssetContract.owner_address)
}
#if LANG_CXX11
inline void UnfreezeAssetContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UnfreezeAssetContract.owner_address)
}
#endif
inline void UnfreezeAssetContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UnfreezeAssetContract.owner_address)
}
inline void UnfreezeAssetContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UnfreezeAssetContract.owner_address)
}
inline ::std::string* UnfreezeAssetContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.UnfreezeAssetContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnfreezeAssetContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.UnfreezeAssetContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnfreezeAssetContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.UnfreezeAssetContract.owner_address)
}

// -------------------------------------------------------------------

// WithdrawBalanceContract

// bytes owner_address = 1;
inline void WithdrawBalanceContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WithdrawBalanceContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.WithdrawBalanceContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void WithdrawBalanceContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.WithdrawBalanceContract.owner_address)
}
#if LANG_CXX11
inline void WithdrawBalanceContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.WithdrawBalanceContract.owner_address)
}
#endif
inline void WithdrawBalanceContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.WithdrawBalanceContract.owner_address)
}
inline void WithdrawBalanceContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.WithdrawBalanceContract.owner_address)
}
inline ::std::string* WithdrawBalanceContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.WithdrawBalanceContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WithdrawBalanceContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.WithdrawBalanceContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WithdrawBalanceContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.WithdrawBalanceContract.owner_address)
}

// -------------------------------------------------------------------

// UpdateAssetContract

// bytes owner_address = 1;
inline void UpdateAssetContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateAssetContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateAssetContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void UpdateAssetContract::set_owner_address(const ::std::string& value) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UpdateAssetContract.owner_address)
}
#if LANG_CXX11
inline void UpdateAssetContract::set_owner_address(::std::string&& value) {
  
  owner_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UpdateAssetContract.owner_address)
}
#endif
inline void UpdateAssetContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UpdateAssetContract.owner_address)
}
inline void UpdateAssetContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UpdateAssetContract.owner_address)
}
inline ::std::string* UpdateAssetContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.UpdateAssetContract.owner_address)
  return owner_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateAssetContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.UpdateAssetContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateAssetContract::set_allocated_owner_address(::std::string* owner_address) {
  if (owner_address != NULL) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.UpdateAssetContract.owner_address)
}

// bytes description = 2;
inline void UpdateAssetContract::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateAssetContract::description() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateAssetContract.description)
  return description_.GetNoArena();
}
inline void UpdateAssetContract::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UpdateAssetContract.description)
}
#if LANG_CXX11
inline void UpdateAssetContract::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UpdateAssetContract.description)
}
#endif
inline void UpdateAssetContract::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UpdateAssetContract.description)
}
inline void UpdateAssetContract::set_description(const void* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UpdateAssetContract.description)
}
inline ::std::string* UpdateAssetContract::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:protocol.UpdateAssetContract.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateAssetContract::release_description() {
  // @@protoc_insertion_point(field_release:protocol.UpdateAssetContract.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateAssetContract::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:protocol.UpdateAssetContract.description)
}

// bytes url = 3;
inline void UpdateAssetContract::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateAssetContract::url() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateAssetContract.url)
  return url_.GetNoArena();
}
inline void UpdateAssetContract::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UpdateAssetContract.url)
}
#if LANG_CXX11
inline void UpdateAssetContract::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UpdateAssetContract.url)
}
#endif
inline void UpdateAssetContract::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UpdateAssetContract.url)
}
inline void UpdateAssetContract::set_url(const void* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UpdateAssetContract.url)
}
inline ::std::string* UpdateAssetContract::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:protocol.UpdateAssetContract.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateAssetContract::release_url() {
  // @@protoc_insertion_point(field_release:protocol.UpdateAssetContract.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateAssetContract::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:protocol.UpdateAssetContract.url)
}

// int64 new_limit = 4;
inline void UpdateAssetContract::clear_new_limit() {
  new_limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UpdateAssetContract::new_limit() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateAssetContract.new_limit)
  return new_limit_;
}
inline void UpdateAssetContract::set_new_limit(::google::protobuf::int64 value) {
  
  new_limit_ = value;
  // @@protoc_insertion_point(field_set:protocol.UpdateAssetContract.new_limit)
}

// int64 new_public_limit = 5;
inline void UpdateAssetContract::clear_new_public_limit() {
  new_public_limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UpdateAssetContract::new_public_limit() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateAssetContract.new_public_limit)
  return new_public_limit_;
}
inline void UpdateAssetContract::set_new_public_limit(::google::protobuf::int64 value) {
  
  new_public_limit_ = value;
  // @@protoc_insertion_point(field_set:protocol.UpdateAssetContract.new_public_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_core_2fContract_2eproto__INCLUDED
